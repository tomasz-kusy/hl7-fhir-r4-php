<?php

namespace TKusy\Hl7FhirR4;

/**
 * Class representing ElementDefinitionType
 *
 * Captures constraints on each element within the resource, profile, or extension.If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 * XSD Type: ElementDefinition
 */
class ElementDefinitionType extends BackboneElementType
{

    /**
     * The path identifies the element and is expressed as a "."-separated list of ancestor elements, beginning with the name of the resource or extension.
     *
     * @var \TKusy\Hl7FhirR4\StringType $path
     */
    private $path = null;

    /**
     * Codes that define how this element is represented in instances, when the deviation varies from the normal case.
     *
     * @var \TKusy\Hl7FhirR4\PropertyRepresentationType[] $representation
     */
    private $representation = [
        
    ];

    /**
     * The name of this element definition slice, when slicing is working. The name must be a token with no dots or spaces. This is a unique name referring to a specific set of constraints applied to this element, used to provide a name to different slices of the same element.
     *
     * @var \TKusy\Hl7FhirR4\StringType $sliceName
     */
    private $sliceName = null;

    /**
     * If true, indicates that this slice definition is constraining a slice definition with the same name in an inherited profile. If false, the slice is not overriding any slice in an inherited profile. If missing, the slice might or might not be overriding a slice in an inherited profile, depending on the sliceName.
     *
     * @var \TKusy\Hl7FhirR4\BooleanType $sliceIsConstraining
     */
    private $sliceIsConstraining = null;

    /**
     * A single preferred label which is the text to display beside the element indicating its meaning or to use to prompt for the element in a user display or form.
     *
     * @var \TKusy\Hl7FhirR4\StringType $label
     */
    private $label = null;

    /**
     * A code that has the same meaning as the element in a particular terminology.
     *
     * @var \TKusy\Hl7FhirR4\CodingType[] $code
     */
    private $code = [
        
    ];

    /**
     * Indicates that the element is sliced into a set of alternative definitions (i.e. in a structure definition, there are multiple different constraints on a single element in the base resource). Slicing can be used in any resource that has cardinality ..* on the base resource, or any resource with a choice of types. The set of slices is any elements that come after this in the element sequence that have the same path, until a shorter path occurs (the shorter path terminates the set).
     *
     * @var \TKusy\Hl7FhirR4\ElementDefinitionSlicingType $slicing
     */
    private $slicing = null;

    /**
     * A concise description of what this element means (e.g. for use in autogenerated summaries).
     *
     * @var \TKusy\Hl7FhirR4\StringType $short
     */
    private $short = null;

    /**
     * Provides a complete explanation of the meaning of the data element for human readability. For the case of elements derived from existing elements (e.g. constraints), the definition SHALL be consistent with the base definition, but convey the meaning of the element in the particular context of use of the resource. (Note: The text you are reading is specified in ElementDefinition.definition).
     *
     * @var \TKusy\Hl7FhirR4\MarkdownType $definition
     */
    private $definition = null;

    /**
     * Explanatory notes and implementation guidance about the data element, including notes about how to use the data properly, exceptions to proper use, etc. (Note: The text you are reading is specified in ElementDefinition.comment).
     *
     * @var \TKusy\Hl7FhirR4\MarkdownType $comment
     */
    private $comment = null;

    /**
     * This element is for traceability of why the element was created and why the constraints exist as they do. This may be used to point to source materials or specifications that drove the structure of this element.
     *
     * @var \TKusy\Hl7FhirR4\MarkdownType $requirements
     */
    private $requirements = null;

    /**
     * Identifies additional names by which this element might also be known.
     *
     * @var \TKusy\Hl7FhirR4\StringType[] $alias
     */
    private $alias = [
        
    ];

    /**
     * The minimum number of times this element SHALL appear in the instance.
     *
     * @var \TKusy\Hl7FhirR4\UnsignedIntType $min
     */
    private $min = null;

    /**
     * The maximum number of times this element is permitted to appear in the instance.
     *
     * @var \TKusy\Hl7FhirR4\StringType $max
     */
    private $max = null;

    /**
     * Information about the base definition of the element, provided to make it unnecessary for tools to trace the deviation of the element through the derived and related profiles. When the element definition is not the original definition of an element - i.g. either in a constraint on another type, or for elements from a super type in a snap shot - then the information in provided in the element definition may be different to the base definition. On the original definition of the element, it will be same.
     *
     * @var \TKusy\Hl7FhirR4\ElementDefinitionBaseType $base
     */
    private $base = null;

    /**
     * Identifies an element defined elsewhere in the definition whose content rules should be applied to the current element. ContentReferences bring across all the rules that are in the ElementDefinition for the element, including definitions, cardinality constraints, bindings, invariants etc.
     *
     * @var \TKusy\Hl7FhirR4\UriType $contentReference
     */
    private $contentReference = null;

    /**
     * The data type or resource that the value of this element is permitted to be.
     *
     * @var \TKusy\Hl7FhirR4\ElementDefinitionType[] $type
     */
    private $type = [
        
    ];

    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\Base64BinaryType $defaultValueBase64Binary
     */
    private $defaultValueBase64Binary = null;

    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\BooleanType $defaultValueBoolean
     */
    private $defaultValueBoolean = null;

    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\CanonicalType $defaultValueCanonical
     */
    private $defaultValueCanonical = null;

    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\CodeType $defaultValueCode
     */
    private $defaultValueCode = null;

    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\DateType $defaultValueDate
     */
    private $defaultValueDate = null;

    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\DateTimeType $defaultValueDateTime
     */
    private $defaultValueDateTime = null;

    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\DecimalType $defaultValueDecimal
     */
    private $defaultValueDecimal = null;

    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\IdType $defaultValueId
     */
    private $defaultValueId = null;

    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\InstantType $defaultValueInstant
     */
    private $defaultValueInstant = null;

    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\IntegerType $defaultValueInteger
     */
    private $defaultValueInteger = null;

    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\MarkdownType $defaultValueMarkdown
     */
    private $defaultValueMarkdown = null;

    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\OidType $defaultValueOid
     */
    private $defaultValueOid = null;

    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\PositiveIntType $defaultValuePositiveInt
     */
    private $defaultValuePositiveInt = null;

    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\StringType $defaultValueString
     */
    private $defaultValueString = null;

    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\TimeType $defaultValueTime
     */
    private $defaultValueTime = null;

    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\UnsignedIntType $defaultValueUnsignedInt
     */
    private $defaultValueUnsignedInt = null;

    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\UriType $defaultValueUri
     */
    private $defaultValueUri = null;

    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\UrlType $defaultValueUrl
     */
    private $defaultValueUrl = null;

    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\UuidType $defaultValueUuid
     */
    private $defaultValueUuid = null;

    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\AddressType $defaultValueAddress
     */
    private $defaultValueAddress = null;

    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\AgeType $defaultValueAge
     */
    private $defaultValueAge = null;

    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\AnnotationType $defaultValueAnnotation
     */
    private $defaultValueAnnotation = null;

    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\AttachmentType $defaultValueAttachment
     */
    private $defaultValueAttachment = null;

    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\CodeableConceptType $defaultValueCodeableConcept
     */
    private $defaultValueCodeableConcept = null;

    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\CodingType $defaultValueCoding
     */
    private $defaultValueCoding = null;

    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\ContactPointType $defaultValueContactPoint
     */
    private $defaultValueContactPoint = null;

    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\CountType $defaultValueCount
     */
    private $defaultValueCount = null;

    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\DistanceType $defaultValueDistance
     */
    private $defaultValueDistance = null;

    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\DurationType $defaultValueDuration
     */
    private $defaultValueDuration = null;

    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\HumanNameType $defaultValueHumanName
     */
    private $defaultValueHumanName = null;

    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\IdentifierType $defaultValueIdentifier
     */
    private $defaultValueIdentifier = null;

    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\MoneyType $defaultValueMoney
     */
    private $defaultValueMoney = null;

    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\PeriodType $defaultValuePeriod
     */
    private $defaultValuePeriod = null;

    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\QuantityType $defaultValueQuantity
     */
    private $defaultValueQuantity = null;

    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\RangeType $defaultValueRange
     */
    private $defaultValueRange = null;

    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\RatioType $defaultValueRatio
     */
    private $defaultValueRatio = null;

    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\ReferenceType $defaultValueReference
     */
    private $defaultValueReference = null;

    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\SampledDataType $defaultValueSampledData
     */
    private $defaultValueSampledData = null;

    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\SignatureType $defaultValueSignature
     */
    private $defaultValueSignature = null;

    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\TimingType $defaultValueTiming
     */
    private $defaultValueTiming = null;

    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\ContactDetailType $defaultValueContactDetail
     */
    private $defaultValueContactDetail = null;

    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\ContributorType $defaultValueContributor
     */
    private $defaultValueContributor = null;

    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\DataRequirementType $defaultValueDataRequirement
     */
    private $defaultValueDataRequirement = null;

    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\ExpressionType $defaultValueExpression
     */
    private $defaultValueExpression = null;

    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\ParameterDefinitionType $defaultValueParameterDefinition
     */
    private $defaultValueParameterDefinition = null;

    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\RelatedArtifactType $defaultValueRelatedArtifact
     */
    private $defaultValueRelatedArtifact = null;

    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\TriggerDefinitionType $defaultValueTriggerDefinition
     */
    private $defaultValueTriggerDefinition = null;

    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\UsageContextType $defaultValueUsageContext
     */
    private $defaultValueUsageContext = null;

    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\DosageType $defaultValueDosage
     */
    private $defaultValueDosage = null;

    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\MetaType $defaultValueMeta
     */
    private $defaultValueMeta = null;

    /**
     * The Implicit meaning that is to be understood when this element is missing (e.g. 'when this element is missing, the period is ongoing').
     *
     * @var \TKusy\Hl7FhirR4\MarkdownType $meaningWhenMissing
     */
    private $meaningWhenMissing = null;

    /**
     * If present, indicates that the order of the repeating element has meaning and describes what that meaning is. If absent, it means that the order of the element has no meaning.
     *
     * @var \TKusy\Hl7FhirR4\StringType $orderMeaning
     */
    private $orderMeaning = null;

    /**
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\Base64BinaryType $fixedBase64Binary
     */
    private $fixedBase64Binary = null;

    /**
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\BooleanType $fixedBoolean
     */
    private $fixedBoolean = null;

    /**
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\CanonicalType $fixedCanonical
     */
    private $fixedCanonical = null;

    /**
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\CodeType $fixedCode
     */
    private $fixedCode = null;

    /**
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\DateType $fixedDate
     */
    private $fixedDate = null;

    /**
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\DateTimeType $fixedDateTime
     */
    private $fixedDateTime = null;

    /**
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\DecimalType $fixedDecimal
     */
    private $fixedDecimal = null;

    /**
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\IdType $fixedId
     */
    private $fixedId = null;

    /**
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\InstantType $fixedInstant
     */
    private $fixedInstant = null;

    /**
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\IntegerType $fixedInteger
     */
    private $fixedInteger = null;

    /**
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\MarkdownType $fixedMarkdown
     */
    private $fixedMarkdown = null;

    /**
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\OidType $fixedOid
     */
    private $fixedOid = null;

    /**
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\PositiveIntType $fixedPositiveInt
     */
    private $fixedPositiveInt = null;

    /**
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\StringType $fixedString
     */
    private $fixedString = null;

    /**
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\TimeType $fixedTime
     */
    private $fixedTime = null;

    /**
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\UnsignedIntType $fixedUnsignedInt
     */
    private $fixedUnsignedInt = null;

    /**
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\UriType $fixedUri
     */
    private $fixedUri = null;

    /**
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\UrlType $fixedUrl
     */
    private $fixedUrl = null;

    /**
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\UuidType $fixedUuid
     */
    private $fixedUuid = null;

    /**
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\AddressType $fixedAddress
     */
    private $fixedAddress = null;

    /**
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\AgeType $fixedAge
     */
    private $fixedAge = null;

    /**
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\AnnotationType $fixedAnnotation
     */
    private $fixedAnnotation = null;

    /**
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\AttachmentType $fixedAttachment
     */
    private $fixedAttachment = null;

    /**
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\CodeableConceptType $fixedCodeableConcept
     */
    private $fixedCodeableConcept = null;

    /**
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\CodingType $fixedCoding
     */
    private $fixedCoding = null;

    /**
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\ContactPointType $fixedContactPoint
     */
    private $fixedContactPoint = null;

    /**
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\CountType $fixedCount
     */
    private $fixedCount = null;

    /**
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\DistanceType $fixedDistance
     */
    private $fixedDistance = null;

    /**
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\DurationType $fixedDuration
     */
    private $fixedDuration = null;

    /**
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\HumanNameType $fixedHumanName
     */
    private $fixedHumanName = null;

    /**
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\IdentifierType $fixedIdentifier
     */
    private $fixedIdentifier = null;

    /**
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\MoneyType $fixedMoney
     */
    private $fixedMoney = null;

    /**
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\PeriodType $fixedPeriod
     */
    private $fixedPeriod = null;

    /**
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\QuantityType $fixedQuantity
     */
    private $fixedQuantity = null;

    /**
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\RangeType $fixedRange
     */
    private $fixedRange = null;

    /**
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\RatioType $fixedRatio
     */
    private $fixedRatio = null;

    /**
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\ReferenceType $fixedReference
     */
    private $fixedReference = null;

    /**
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\SampledDataType $fixedSampledData
     */
    private $fixedSampledData = null;

    /**
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\SignatureType $fixedSignature
     */
    private $fixedSignature = null;

    /**
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\TimingType $fixedTiming
     */
    private $fixedTiming = null;

    /**
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\ContactDetailType $fixedContactDetail
     */
    private $fixedContactDetail = null;

    /**
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\ContributorType $fixedContributor
     */
    private $fixedContributor = null;

    /**
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\DataRequirementType $fixedDataRequirement
     */
    private $fixedDataRequirement = null;

    /**
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\ExpressionType $fixedExpression
     */
    private $fixedExpression = null;

    /**
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\ParameterDefinitionType $fixedParameterDefinition
     */
    private $fixedParameterDefinition = null;

    /**
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\RelatedArtifactType $fixedRelatedArtifact
     */
    private $fixedRelatedArtifact = null;

    /**
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\TriggerDefinitionType $fixedTriggerDefinition
     */
    private $fixedTriggerDefinition = null;

    /**
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\UsageContextType $fixedUsageContext
     */
    private $fixedUsageContext = null;

    /**
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\DosageType $fixedDosage
     */
    private $fixedDosage = null;

    /**
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\MetaType $fixedMeta
     */
    private $fixedMeta = null;

    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\Base64BinaryType $patternBase64Binary
     */
    private $patternBase64Binary = null;

    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\BooleanType $patternBoolean
     */
    private $patternBoolean = null;

    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\CanonicalType $patternCanonical
     */
    private $patternCanonical = null;

    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\CodeType $patternCode
     */
    private $patternCode = null;

    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\DateType $patternDate
     */
    private $patternDate = null;

    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\DateTimeType $patternDateTime
     */
    private $patternDateTime = null;

    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\DecimalType $patternDecimal
     */
    private $patternDecimal = null;

    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\IdType $patternId
     */
    private $patternId = null;

    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\InstantType $patternInstant
     */
    private $patternInstant = null;

    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\IntegerType $patternInteger
     */
    private $patternInteger = null;

    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\MarkdownType $patternMarkdown
     */
    private $patternMarkdown = null;

    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\OidType $patternOid
     */
    private $patternOid = null;

    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\PositiveIntType $patternPositiveInt
     */
    private $patternPositiveInt = null;

    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\StringType $patternString
     */
    private $patternString = null;

    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\TimeType $patternTime
     */
    private $patternTime = null;

    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\UnsignedIntType $patternUnsignedInt
     */
    private $patternUnsignedInt = null;

    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\UriType $patternUri
     */
    private $patternUri = null;

    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\UrlType $patternUrl
     */
    private $patternUrl = null;

    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\UuidType $patternUuid
     */
    private $patternUuid = null;

    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\AddressType $patternAddress
     */
    private $patternAddress = null;

    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\AgeType $patternAge
     */
    private $patternAge = null;

    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\AnnotationType $patternAnnotation
     */
    private $patternAnnotation = null;

    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\AttachmentType $patternAttachment
     */
    private $patternAttachment = null;

    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\CodeableConceptType $patternCodeableConcept
     */
    private $patternCodeableConcept = null;

    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\CodingType $patternCoding
     */
    private $patternCoding = null;

    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\ContactPointType $patternContactPoint
     */
    private $patternContactPoint = null;

    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\CountType $patternCount
     */
    private $patternCount = null;

    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\DistanceType $patternDistance
     */
    private $patternDistance = null;

    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\DurationType $patternDuration
     */
    private $patternDuration = null;

    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\HumanNameType $patternHumanName
     */
    private $patternHumanName = null;

    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\IdentifierType $patternIdentifier
     */
    private $patternIdentifier = null;

    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\MoneyType $patternMoney
     */
    private $patternMoney = null;

    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\PeriodType $patternPeriod
     */
    private $patternPeriod = null;

    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\QuantityType $patternQuantity
     */
    private $patternQuantity = null;

    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\RangeType $patternRange
     */
    private $patternRange = null;

    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\RatioType $patternRatio
     */
    private $patternRatio = null;

    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\ReferenceType $patternReference
     */
    private $patternReference = null;

    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\SampledDataType $patternSampledData
     */
    private $patternSampledData = null;

    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\SignatureType $patternSignature
     */
    private $patternSignature = null;

    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\TimingType $patternTiming
     */
    private $patternTiming = null;

    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\ContactDetailType $patternContactDetail
     */
    private $patternContactDetail = null;

    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\ContributorType $patternContributor
     */
    private $patternContributor = null;

    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\DataRequirementType $patternDataRequirement
     */
    private $patternDataRequirement = null;

    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\ExpressionType $patternExpression
     */
    private $patternExpression = null;

    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\ParameterDefinitionType $patternParameterDefinition
     */
    private $patternParameterDefinition = null;

    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\RelatedArtifactType $patternRelatedArtifact
     */
    private $patternRelatedArtifact = null;

    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\TriggerDefinitionType $patternTriggerDefinition
     */
    private $patternTriggerDefinition = null;

    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\UsageContextType $patternUsageContext
     */
    private $patternUsageContext = null;

    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\DosageType $patternDosage
     */
    private $patternDosage = null;

    /**
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @var \TKusy\Hl7FhirR4\MetaType $patternMeta
     */
    private $patternMeta = null;

    /**
     * A sample value for this element demonstrating the type of information that would typically be found in the element.
     *
     * @var \TKusy\Hl7FhirR4\ElementDefinitionExampleType[] $example
     */
    private $example = [
        
    ];

    /**
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. (choose any one of minValue*, but only one)
     *
     * @var \TKusy\Hl7FhirR4\DateType $minValueDate
     */
    private $minValueDate = null;

    /**
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. (choose any one of minValue*, but only one)
     *
     * @var \TKusy\Hl7FhirR4\DateTimeType $minValueDateTime
     */
    private $minValueDateTime = null;

    /**
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. (choose any one of minValue*, but only one)
     *
     * @var \TKusy\Hl7FhirR4\InstantType $minValueInstant
     */
    private $minValueInstant = null;

    /**
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. (choose any one of minValue*, but only one)
     *
     * @var \TKusy\Hl7FhirR4\TimeType $minValueTime
     */
    private $minValueTime = null;

    /**
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. (choose any one of minValue*, but only one)
     *
     * @var \TKusy\Hl7FhirR4\DecimalType $minValueDecimal
     */
    private $minValueDecimal = null;

    /**
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. (choose any one of minValue*, but only one)
     *
     * @var \TKusy\Hl7FhirR4\IntegerType $minValueInteger
     */
    private $minValueInteger = null;

    /**
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. (choose any one of minValue*, but only one)
     *
     * @var \TKusy\Hl7FhirR4\PositiveIntType $minValuePositiveInt
     */
    private $minValuePositiveInt = null;

    /**
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. (choose any one of minValue*, but only one)
     *
     * @var \TKusy\Hl7FhirR4\UnsignedIntType $minValueUnsignedInt
     */
    private $minValueUnsignedInt = null;

    /**
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. (choose any one of minValue*, but only one)
     *
     * @var \TKusy\Hl7FhirR4\QuantityType $minValueQuantity
     */
    private $minValueQuantity = null;

    /**
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. (choose any one of maxValue*, but only one)
     *
     * @var \TKusy\Hl7FhirR4\DateType $maxValueDate
     */
    private $maxValueDate = null;

    /**
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. (choose any one of maxValue*, but only one)
     *
     * @var \TKusy\Hl7FhirR4\DateTimeType $maxValueDateTime
     */
    private $maxValueDateTime = null;

    /**
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. (choose any one of maxValue*, but only one)
     *
     * @var \TKusy\Hl7FhirR4\InstantType $maxValueInstant
     */
    private $maxValueInstant = null;

    /**
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. (choose any one of maxValue*, but only one)
     *
     * @var \TKusy\Hl7FhirR4\TimeType $maxValueTime
     */
    private $maxValueTime = null;

    /**
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. (choose any one of maxValue*, but only one)
     *
     * @var \TKusy\Hl7FhirR4\DecimalType $maxValueDecimal
     */
    private $maxValueDecimal = null;

    /**
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. (choose any one of maxValue*, but only one)
     *
     * @var \TKusy\Hl7FhirR4\IntegerType $maxValueInteger
     */
    private $maxValueInteger = null;

    /**
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. (choose any one of maxValue*, but only one)
     *
     * @var \TKusy\Hl7FhirR4\PositiveIntType $maxValuePositiveInt
     */
    private $maxValuePositiveInt = null;

    /**
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. (choose any one of maxValue*, but only one)
     *
     * @var \TKusy\Hl7FhirR4\UnsignedIntType $maxValueUnsignedInt
     */
    private $maxValueUnsignedInt = null;

    /**
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. (choose any one of maxValue*, but only one)
     *
     * @var \TKusy\Hl7FhirR4\QuantityType $maxValueQuantity
     */
    private $maxValueQuantity = null;

    /**
     * Indicates the maximum length in characters that is permitted to be present in conformant instances and which is expected to be supported by conformant consumers that support the element.
     *
     * @var \TKusy\Hl7FhirR4\IntegerType $maxLength
     */
    private $maxLength = null;

    /**
     * A reference to an invariant that may make additional statements about the cardinality or value in the instance.
     *
     * @var \TKusy\Hl7FhirR4\IdType[] $condition
     */
    private $condition = [
        
    ];

    /**
     * Formal constraints such as co-occurrence and other constraints that can be computationally evaluated within the context of the instance.
     *
     * @var \TKusy\Hl7FhirR4\ElementDefinitionConstraintType[] $constraint
     */
    private $constraint = [
        
    ];

    /**
     * If true, implementations that produce or consume resources SHALL provide "support" for the element in some meaningful way. If false, the element may be ignored and not supported. If false, whether to populate or use the data element in any way is at the discretion of the implementation.
     *
     * @var \TKusy\Hl7FhirR4\BooleanType $mustSupport
     */
    private $mustSupport = null;

    /**
     * If true, the value of this element affects the interpretation of the element or resource that contains it, and the value of the element cannot be ignored. Typically, this is used for status, negation and qualification codes. The effect of this is that the element cannot be ignored by systems: they SHALL either recognize the element and process it, and/or a pre-determination has been made that it is not relevant to their particular system.
     *
     * @var \TKusy\Hl7FhirR4\BooleanType $isModifier
     */
    private $isModifier = null;

    /**
     * Explains how that element affects the interpretation of the resource or element that contains it.
     *
     * @var \TKusy\Hl7FhirR4\StringType $isModifierReason
     */
    private $isModifierReason = null;

    /**
     * Whether the element should be included if a client requests a search with the parameter _summary=true.
     *
     * @var \TKusy\Hl7FhirR4\BooleanType $isSummary
     */
    private $isSummary = null;

    /**
     * Binds to a value set if this element is coded (code, Coding, CodeableConcept, Quantity), or the data types (string, uri).
     *
     * @var \TKusy\Hl7FhirR4\ElementDefinitionBindingType $binding
     */
    private $binding = null;

    /**
     * Identifies a concept from an external specification that roughly corresponds to this element.
     *
     * @var \TKusy\Hl7FhirR4\ElementDefinitionMappingType[] $mapping
     */
    private $mapping = [
        
    ];

    /**
     * Gets as path
     *
     * The path identifies the element and is expressed as a "."-separated list of ancestor elements, beginning with the name of the resource or extension.
     *
     * @return \TKusy\Hl7FhirR4\StringType
     */
    public function getPath()
    {
        return $this->path;
    }

    /**
     * Sets a new path
     *
     * The path identifies the element and is expressed as a "."-separated list of ancestor elements, beginning with the name of the resource or extension.
     *
     * @param \TKusy\Hl7FhirR4\StringType $path
     * @return self
     */
    public function setPath(\TKusy\Hl7FhirR4\StringType $path)
    {
        $this->path = $path;
        return $this;
    }

    /**
     * Adds as representation
     *
     * Codes that define how this element is represented in instances, when the deviation varies from the normal case.
     *
     * @return self
     * @param \TKusy\Hl7FhirR4\PropertyRepresentationType $representation
     */
    public function addToRepresentation(\TKusy\Hl7FhirR4\PropertyRepresentationType $representation)
    {
        $this->representation[] = $representation;
        return $this;
    }

    /**
     * isset representation
     *
     * Codes that define how this element is represented in instances, when the deviation varies from the normal case.
     *
     * @param int|string $index
     * @return bool
     */
    public function issetRepresentation($index)
    {
        return isset($this->representation[$index]);
    }

    /**
     * unset representation
     *
     * Codes that define how this element is represented in instances, when the deviation varies from the normal case.
     *
     * @param int|string $index
     * @return void
     */
    public function unsetRepresentation($index)
    {
        unset($this->representation[$index]);
    }

    /**
     * Gets as representation
     *
     * Codes that define how this element is represented in instances, when the deviation varies from the normal case.
     *
     * @return \TKusy\Hl7FhirR4\PropertyRepresentationType[]
     */
    public function getRepresentation()
    {
        return $this->representation;
    }

    /**
     * Sets a new representation
     *
     * Codes that define how this element is represented in instances, when the deviation varies from the normal case.
     *
     * @param \TKusy\Hl7FhirR4\PropertyRepresentationType[] $representation
     * @return self
     */
    public function setRepresentation(array $representation)
    {
        $this->representation = $representation;
        return $this;
    }

    /**
     * Gets as sliceName
     *
     * The name of this element definition slice, when slicing is working. The name must be a token with no dots or spaces. This is a unique name referring to a specific set of constraints applied to this element, used to provide a name to different slices of the same element.
     *
     * @return \TKusy\Hl7FhirR4\StringType
     */
    public function getSliceName()
    {
        return $this->sliceName;
    }

    /**
     * Sets a new sliceName
     *
     * The name of this element definition slice, when slicing is working. The name must be a token with no dots or spaces. This is a unique name referring to a specific set of constraints applied to this element, used to provide a name to different slices of the same element.
     *
     * @param \TKusy\Hl7FhirR4\StringType $sliceName
     * @return self
     */
    public function setSliceName(\TKusy\Hl7FhirR4\StringType $sliceName)
    {
        $this->sliceName = $sliceName;
        return $this;
    }

    /**
     * Gets as sliceIsConstraining
     *
     * If true, indicates that this slice definition is constraining a slice definition with the same name in an inherited profile. If false, the slice is not overriding any slice in an inherited profile. If missing, the slice might or might not be overriding a slice in an inherited profile, depending on the sliceName.
     *
     * @return \TKusy\Hl7FhirR4\BooleanType
     */
    public function getSliceIsConstraining()
    {
        return $this->sliceIsConstraining;
    }

    /**
     * Sets a new sliceIsConstraining
     *
     * If true, indicates that this slice definition is constraining a slice definition with the same name in an inherited profile. If false, the slice is not overriding any slice in an inherited profile. If missing, the slice might or might not be overriding a slice in an inherited profile, depending on the sliceName.
     *
     * @param \TKusy\Hl7FhirR4\BooleanType $sliceIsConstraining
     * @return self
     */
    public function setSliceIsConstraining(\TKusy\Hl7FhirR4\BooleanType $sliceIsConstraining)
    {
        $this->sliceIsConstraining = $sliceIsConstraining;
        return $this;
    }

    /**
     * Gets as label
     *
     * A single preferred label which is the text to display beside the element indicating its meaning or to use to prompt for the element in a user display or form.
     *
     * @return \TKusy\Hl7FhirR4\StringType
     */
    public function getLabel()
    {
        return $this->label;
    }

    /**
     * Sets a new label
     *
     * A single preferred label which is the text to display beside the element indicating its meaning or to use to prompt for the element in a user display or form.
     *
     * @param \TKusy\Hl7FhirR4\StringType $label
     * @return self
     */
    public function setLabel(\TKusy\Hl7FhirR4\StringType $label)
    {
        $this->label = $label;
        return $this;
    }

    /**
     * Adds as code
     *
     * A code that has the same meaning as the element in a particular terminology.
     *
     * @return self
     * @param \TKusy\Hl7FhirR4\CodingType $code
     */
    public function addToCode(\TKusy\Hl7FhirR4\CodingType $code)
    {
        $this->code[] = $code;
        return $this;
    }

    /**
     * isset code
     *
     * A code that has the same meaning as the element in a particular terminology.
     *
     * @param int|string $index
     * @return bool
     */
    public function issetCode($index)
    {
        return isset($this->code[$index]);
    }

    /**
     * unset code
     *
     * A code that has the same meaning as the element in a particular terminology.
     *
     * @param int|string $index
     * @return void
     */
    public function unsetCode($index)
    {
        unset($this->code[$index]);
    }

    /**
     * Gets as code
     *
     * A code that has the same meaning as the element in a particular terminology.
     *
     * @return \TKusy\Hl7FhirR4\CodingType[]
     */
    public function getCode()
    {
        return $this->code;
    }

    /**
     * Sets a new code
     *
     * A code that has the same meaning as the element in a particular terminology.
     *
     * @param \TKusy\Hl7FhirR4\CodingType[] $code
     * @return self
     */
    public function setCode(array $code)
    {
        $this->code = $code;
        return $this;
    }

    /**
     * Gets as slicing
     *
     * Indicates that the element is sliced into a set of alternative definitions (i.e. in a structure definition, there are multiple different constraints on a single element in the base resource). Slicing can be used in any resource that has cardinality ..* on the base resource, or any resource with a choice of types. The set of slices is any elements that come after this in the element sequence that have the same path, until a shorter path occurs (the shorter path terminates the set).
     *
     * @return \TKusy\Hl7FhirR4\ElementDefinitionSlicingType
     */
    public function getSlicing()
    {
        return $this->slicing;
    }

    /**
     * Sets a new slicing
     *
     * Indicates that the element is sliced into a set of alternative definitions (i.e. in a structure definition, there are multiple different constraints on a single element in the base resource). Slicing can be used in any resource that has cardinality ..* on the base resource, or any resource with a choice of types. The set of slices is any elements that come after this in the element sequence that have the same path, until a shorter path occurs (the shorter path terminates the set).
     *
     * @param \TKusy\Hl7FhirR4\ElementDefinitionSlicingType $slicing
     * @return self
     */
    public function setSlicing(\TKusy\Hl7FhirR4\ElementDefinitionSlicingType $slicing)
    {
        $this->slicing = $slicing;
        return $this;
    }

    /**
     * Gets as short
     *
     * A concise description of what this element means (e.g. for use in autogenerated summaries).
     *
     * @return \TKusy\Hl7FhirR4\StringType
     */
    public function getShort()
    {
        return $this->short;
    }

    /**
     * Sets a new short
     *
     * A concise description of what this element means (e.g. for use in autogenerated summaries).
     *
     * @param \TKusy\Hl7FhirR4\StringType $short
     * @return self
     */
    public function setShort(\TKusy\Hl7FhirR4\StringType $short)
    {
        $this->short = $short;
        return $this;
    }

    /**
     * Gets as definition
     *
     * Provides a complete explanation of the meaning of the data element for human readability. For the case of elements derived from existing elements (e.g. constraints), the definition SHALL be consistent with the base definition, but convey the meaning of the element in the particular context of use of the resource. (Note: The text you are reading is specified in ElementDefinition.definition).
     *
     * @return \TKusy\Hl7FhirR4\MarkdownType
     */
    public function getDefinition()
    {
        return $this->definition;
    }

    /**
     * Sets a new definition
     *
     * Provides a complete explanation of the meaning of the data element for human readability. For the case of elements derived from existing elements (e.g. constraints), the definition SHALL be consistent with the base definition, but convey the meaning of the element in the particular context of use of the resource. (Note: The text you are reading is specified in ElementDefinition.definition).
     *
     * @param \TKusy\Hl7FhirR4\MarkdownType $definition
     * @return self
     */
    public function setDefinition(\TKusy\Hl7FhirR4\MarkdownType $definition)
    {
        $this->definition = $definition;
        return $this;
    }

    /**
     * Gets as comment
     *
     * Explanatory notes and implementation guidance about the data element, including notes about how to use the data properly, exceptions to proper use, etc. (Note: The text you are reading is specified in ElementDefinition.comment).
     *
     * @return \TKusy\Hl7FhirR4\MarkdownType
     */
    public function getComment()
    {
        return $this->comment;
    }

    /**
     * Sets a new comment
     *
     * Explanatory notes and implementation guidance about the data element, including notes about how to use the data properly, exceptions to proper use, etc. (Note: The text you are reading is specified in ElementDefinition.comment).
     *
     * @param \TKusy\Hl7FhirR4\MarkdownType $comment
     * @return self
     */
    public function setComment(\TKusy\Hl7FhirR4\MarkdownType $comment)
    {
        $this->comment = $comment;
        return $this;
    }

    /**
     * Gets as requirements
     *
     * This element is for traceability of why the element was created and why the constraints exist as they do. This may be used to point to source materials or specifications that drove the structure of this element.
     *
     * @return \TKusy\Hl7FhirR4\MarkdownType
     */
    public function getRequirements()
    {
        return $this->requirements;
    }

    /**
     * Sets a new requirements
     *
     * This element is for traceability of why the element was created and why the constraints exist as they do. This may be used to point to source materials or specifications that drove the structure of this element.
     *
     * @param \TKusy\Hl7FhirR4\MarkdownType $requirements
     * @return self
     */
    public function setRequirements(\TKusy\Hl7FhirR4\MarkdownType $requirements)
    {
        $this->requirements = $requirements;
        return $this;
    }

    /**
     * Adds as alias
     *
     * Identifies additional names by which this element might also be known.
     *
     * @return self
     * @param \TKusy\Hl7FhirR4\StringType $alias
     */
    public function addToAlias(\TKusy\Hl7FhirR4\StringType $alias)
    {
        $this->alias[] = $alias;
        return $this;
    }

    /**
     * isset alias
     *
     * Identifies additional names by which this element might also be known.
     *
     * @param int|string $index
     * @return bool
     */
    public function issetAlias($index)
    {
        return isset($this->alias[$index]);
    }

    /**
     * unset alias
     *
     * Identifies additional names by which this element might also be known.
     *
     * @param int|string $index
     * @return void
     */
    public function unsetAlias($index)
    {
        unset($this->alias[$index]);
    }

    /**
     * Gets as alias
     *
     * Identifies additional names by which this element might also be known.
     *
     * @return \TKusy\Hl7FhirR4\StringType[]
     */
    public function getAlias()
    {
        return $this->alias;
    }

    /**
     * Sets a new alias
     *
     * Identifies additional names by which this element might also be known.
     *
     * @param \TKusy\Hl7FhirR4\StringType[] $alias
     * @return self
     */
    public function setAlias(array $alias)
    {
        $this->alias = $alias;
        return $this;
    }

    /**
     * Gets as min
     *
     * The minimum number of times this element SHALL appear in the instance.
     *
     * @return \TKusy\Hl7FhirR4\UnsignedIntType
     */
    public function getMin()
    {
        return $this->min;
    }

    /**
     * Sets a new min
     *
     * The minimum number of times this element SHALL appear in the instance.
     *
     * @param \TKusy\Hl7FhirR4\UnsignedIntType $min
     * @return self
     */
    public function setMin(\TKusy\Hl7FhirR4\UnsignedIntType $min)
    {
        $this->min = $min;
        return $this;
    }

    /**
     * Gets as max
     *
     * The maximum number of times this element is permitted to appear in the instance.
     *
     * @return \TKusy\Hl7FhirR4\StringType
     */
    public function getMax()
    {
        return $this->max;
    }

    /**
     * Sets a new max
     *
     * The maximum number of times this element is permitted to appear in the instance.
     *
     * @param \TKusy\Hl7FhirR4\StringType $max
     * @return self
     */
    public function setMax(\TKusy\Hl7FhirR4\StringType $max)
    {
        $this->max = $max;
        return $this;
    }

    /**
     * Gets as base
     *
     * Information about the base definition of the element, provided to make it unnecessary for tools to trace the deviation of the element through the derived and related profiles. When the element definition is not the original definition of an element - i.g. either in a constraint on another type, or for elements from a super type in a snap shot - then the information in provided in the element definition may be different to the base definition. On the original definition of the element, it will be same.
     *
     * @return \TKusy\Hl7FhirR4\ElementDefinitionBaseType
     */
    public function getBase()
    {
        return $this->base;
    }

    /**
     * Sets a new base
     *
     * Information about the base definition of the element, provided to make it unnecessary for tools to trace the deviation of the element through the derived and related profiles. When the element definition is not the original definition of an element - i.g. either in a constraint on another type, or for elements from a super type in a snap shot - then the information in provided in the element definition may be different to the base definition. On the original definition of the element, it will be same.
     *
     * @param \TKusy\Hl7FhirR4\ElementDefinitionBaseType $base
     * @return self
     */
    public function setBase(\TKusy\Hl7FhirR4\ElementDefinitionBaseType $base)
    {
        $this->base = $base;
        return $this;
    }

    /**
     * Gets as contentReference
     *
     * Identifies an element defined elsewhere in the definition whose content rules should be applied to the current element. ContentReferences bring across all the rules that are in the ElementDefinition for the element, including definitions, cardinality constraints, bindings, invariants etc.
     *
     * @return \TKusy\Hl7FhirR4\UriType
     */
    public function getContentReference()
    {
        return $this->contentReference;
    }

    /**
     * Sets a new contentReference
     *
     * Identifies an element defined elsewhere in the definition whose content rules should be applied to the current element. ContentReferences bring across all the rules that are in the ElementDefinition for the element, including definitions, cardinality constraints, bindings, invariants etc.
     *
     * @param \TKusy\Hl7FhirR4\UriType $contentReference
     * @return self
     */
    public function setContentReference(\TKusy\Hl7FhirR4\UriType $contentReference)
    {
        $this->contentReference = $contentReference;
        return $this;
    }

    /**
     * Adds as type
     *
     * The data type or resource that the value of this element is permitted to be.
     *
     * @return self
     * @param \TKusy\Hl7FhirR4\ElementDefinitionType $type
     */
    public function addToType(\TKusy\Hl7FhirR4\ElementDefinitionType $type)
    {
        $this->type[] = $type;
        return $this;
    }

    /**
     * isset type
     *
     * The data type or resource that the value of this element is permitted to be.
     *
     * @param int|string $index
     * @return bool
     */
    public function issetType($index)
    {
        return isset($this->type[$index]);
    }

    /**
     * unset type
     *
     * The data type or resource that the value of this element is permitted to be.
     *
     * @param int|string $index
     * @return void
     */
    public function unsetType($index)
    {
        unset($this->type[$index]);
    }

    /**
     * Gets as type
     *
     * The data type or resource that the value of this element is permitted to be.
     *
     * @return \TKusy\Hl7FhirR4\ElementDefinitionType[]
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * Sets a new type
     *
     * The data type or resource that the value of this element is permitted to be.
     *
     * @param \TKusy\Hl7FhirR4\ElementDefinitionType[] $type
     * @return self
     */
    public function setType(array $type)
    {
        $this->type = $type;
        return $this;
    }

    /**
     * Gets as defaultValueBase64Binary
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\Base64BinaryType
     */
    public function getDefaultValueBase64Binary()
    {
        return $this->defaultValueBase64Binary;
    }

    /**
     * Sets a new defaultValueBase64Binary
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\Base64BinaryType $defaultValueBase64Binary
     * @return self
     */
    public function setDefaultValueBase64Binary(\TKusy\Hl7FhirR4\Base64BinaryType $defaultValueBase64Binary)
    {
        $this->defaultValueBase64Binary = $defaultValueBase64Binary;
        return $this;
    }

    /**
     * Gets as defaultValueBoolean
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\BooleanType
     */
    public function getDefaultValueBoolean()
    {
        return $this->defaultValueBoolean;
    }

    /**
     * Sets a new defaultValueBoolean
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\BooleanType $defaultValueBoolean
     * @return self
     */
    public function setDefaultValueBoolean(\TKusy\Hl7FhirR4\BooleanType $defaultValueBoolean)
    {
        $this->defaultValueBoolean = $defaultValueBoolean;
        return $this;
    }

    /**
     * Gets as defaultValueCanonical
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\CanonicalType
     */
    public function getDefaultValueCanonical()
    {
        return $this->defaultValueCanonical;
    }

    /**
     * Sets a new defaultValueCanonical
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\CanonicalType $defaultValueCanonical
     * @return self
     */
    public function setDefaultValueCanonical(\TKusy\Hl7FhirR4\CanonicalType $defaultValueCanonical)
    {
        $this->defaultValueCanonical = $defaultValueCanonical;
        return $this;
    }

    /**
     * Gets as defaultValueCode
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\CodeType
     */
    public function getDefaultValueCode()
    {
        return $this->defaultValueCode;
    }

    /**
     * Sets a new defaultValueCode
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\CodeType $defaultValueCode
     * @return self
     */
    public function setDefaultValueCode(\TKusy\Hl7FhirR4\CodeType $defaultValueCode)
    {
        $this->defaultValueCode = $defaultValueCode;
        return $this;
    }

    /**
     * Gets as defaultValueDate
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\DateType
     */
    public function getDefaultValueDate()
    {
        return $this->defaultValueDate;
    }

    /**
     * Sets a new defaultValueDate
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\DateType $defaultValueDate
     * @return self
     */
    public function setDefaultValueDate(\TKusy\Hl7FhirR4\DateType $defaultValueDate)
    {
        $this->defaultValueDate = $defaultValueDate;
        return $this;
    }

    /**
     * Gets as defaultValueDateTime
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\DateTimeType
     */
    public function getDefaultValueDateTime()
    {
        return $this->defaultValueDateTime;
    }

    /**
     * Sets a new defaultValueDateTime
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\DateTimeType $defaultValueDateTime
     * @return self
     */
    public function setDefaultValueDateTime(\TKusy\Hl7FhirR4\DateTimeType $defaultValueDateTime)
    {
        $this->defaultValueDateTime = $defaultValueDateTime;
        return $this;
    }

    /**
     * Gets as defaultValueDecimal
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\DecimalType
     */
    public function getDefaultValueDecimal()
    {
        return $this->defaultValueDecimal;
    }

    /**
     * Sets a new defaultValueDecimal
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\DecimalType $defaultValueDecimal
     * @return self
     */
    public function setDefaultValueDecimal(\TKusy\Hl7FhirR4\DecimalType $defaultValueDecimal)
    {
        $this->defaultValueDecimal = $defaultValueDecimal;
        return $this;
    }

    /**
     * Gets as defaultValueId
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\IdType
     */
    public function getDefaultValueId()
    {
        return $this->defaultValueId;
    }

    /**
     * Sets a new defaultValueId
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\IdType $defaultValueId
     * @return self
     */
    public function setDefaultValueId(\TKusy\Hl7FhirR4\IdType $defaultValueId)
    {
        $this->defaultValueId = $defaultValueId;
        return $this;
    }

    /**
     * Gets as defaultValueInstant
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\InstantType
     */
    public function getDefaultValueInstant()
    {
        return $this->defaultValueInstant;
    }

    /**
     * Sets a new defaultValueInstant
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\InstantType $defaultValueInstant
     * @return self
     */
    public function setDefaultValueInstant(\TKusy\Hl7FhirR4\InstantType $defaultValueInstant)
    {
        $this->defaultValueInstant = $defaultValueInstant;
        return $this;
    }

    /**
     * Gets as defaultValueInteger
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\IntegerType
     */
    public function getDefaultValueInteger()
    {
        return $this->defaultValueInteger;
    }

    /**
     * Sets a new defaultValueInteger
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\IntegerType $defaultValueInteger
     * @return self
     */
    public function setDefaultValueInteger(\TKusy\Hl7FhirR4\IntegerType $defaultValueInteger)
    {
        $this->defaultValueInteger = $defaultValueInteger;
        return $this;
    }

    /**
     * Gets as defaultValueMarkdown
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\MarkdownType
     */
    public function getDefaultValueMarkdown()
    {
        return $this->defaultValueMarkdown;
    }

    /**
     * Sets a new defaultValueMarkdown
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\MarkdownType $defaultValueMarkdown
     * @return self
     */
    public function setDefaultValueMarkdown(\TKusy\Hl7FhirR4\MarkdownType $defaultValueMarkdown)
    {
        $this->defaultValueMarkdown = $defaultValueMarkdown;
        return $this;
    }

    /**
     * Gets as defaultValueOid
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\OidType
     */
    public function getDefaultValueOid()
    {
        return $this->defaultValueOid;
    }

    /**
     * Sets a new defaultValueOid
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\OidType $defaultValueOid
     * @return self
     */
    public function setDefaultValueOid(\TKusy\Hl7FhirR4\OidType $defaultValueOid)
    {
        $this->defaultValueOid = $defaultValueOid;
        return $this;
    }

    /**
     * Gets as defaultValuePositiveInt
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\PositiveIntType
     */
    public function getDefaultValuePositiveInt()
    {
        return $this->defaultValuePositiveInt;
    }

    /**
     * Sets a new defaultValuePositiveInt
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\PositiveIntType $defaultValuePositiveInt
     * @return self
     */
    public function setDefaultValuePositiveInt(\TKusy\Hl7FhirR4\PositiveIntType $defaultValuePositiveInt)
    {
        $this->defaultValuePositiveInt = $defaultValuePositiveInt;
        return $this;
    }

    /**
     * Gets as defaultValueString
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\StringType
     */
    public function getDefaultValueString()
    {
        return $this->defaultValueString;
    }

    /**
     * Sets a new defaultValueString
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\StringType $defaultValueString
     * @return self
     */
    public function setDefaultValueString(\TKusy\Hl7FhirR4\StringType $defaultValueString)
    {
        $this->defaultValueString = $defaultValueString;
        return $this;
    }

    /**
     * Gets as defaultValueTime
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\TimeType
     */
    public function getDefaultValueTime()
    {
        return $this->defaultValueTime;
    }

    /**
     * Sets a new defaultValueTime
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\TimeType $defaultValueTime
     * @return self
     */
    public function setDefaultValueTime(\TKusy\Hl7FhirR4\TimeType $defaultValueTime)
    {
        $this->defaultValueTime = $defaultValueTime;
        return $this;
    }

    /**
     * Gets as defaultValueUnsignedInt
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\UnsignedIntType
     */
    public function getDefaultValueUnsignedInt()
    {
        return $this->defaultValueUnsignedInt;
    }

    /**
     * Sets a new defaultValueUnsignedInt
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\UnsignedIntType $defaultValueUnsignedInt
     * @return self
     */
    public function setDefaultValueUnsignedInt(\TKusy\Hl7FhirR4\UnsignedIntType $defaultValueUnsignedInt)
    {
        $this->defaultValueUnsignedInt = $defaultValueUnsignedInt;
        return $this;
    }

    /**
     * Gets as defaultValueUri
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\UriType
     */
    public function getDefaultValueUri()
    {
        return $this->defaultValueUri;
    }

    /**
     * Sets a new defaultValueUri
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\UriType $defaultValueUri
     * @return self
     */
    public function setDefaultValueUri(\TKusy\Hl7FhirR4\UriType $defaultValueUri)
    {
        $this->defaultValueUri = $defaultValueUri;
        return $this;
    }

    /**
     * Gets as defaultValueUrl
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\UrlType
     */
    public function getDefaultValueUrl()
    {
        return $this->defaultValueUrl;
    }

    /**
     * Sets a new defaultValueUrl
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\UrlType $defaultValueUrl
     * @return self
     */
    public function setDefaultValueUrl(\TKusy\Hl7FhirR4\UrlType $defaultValueUrl)
    {
        $this->defaultValueUrl = $defaultValueUrl;
        return $this;
    }

    /**
     * Gets as defaultValueUuid
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\UuidType
     */
    public function getDefaultValueUuid()
    {
        return $this->defaultValueUuid;
    }

    /**
     * Sets a new defaultValueUuid
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\UuidType $defaultValueUuid
     * @return self
     */
    public function setDefaultValueUuid(\TKusy\Hl7FhirR4\UuidType $defaultValueUuid)
    {
        $this->defaultValueUuid = $defaultValueUuid;
        return $this;
    }

    /**
     * Gets as defaultValueAddress
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\AddressType
     */
    public function getDefaultValueAddress()
    {
        return $this->defaultValueAddress;
    }

    /**
     * Sets a new defaultValueAddress
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\AddressType $defaultValueAddress
     * @return self
     */
    public function setDefaultValueAddress(\TKusy\Hl7FhirR4\AddressType $defaultValueAddress)
    {
        $this->defaultValueAddress = $defaultValueAddress;
        return $this;
    }

    /**
     * Gets as defaultValueAge
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\AgeType
     */
    public function getDefaultValueAge()
    {
        return $this->defaultValueAge;
    }

    /**
     * Sets a new defaultValueAge
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\AgeType $defaultValueAge
     * @return self
     */
    public function setDefaultValueAge(\TKusy\Hl7FhirR4\AgeType $defaultValueAge)
    {
        $this->defaultValueAge = $defaultValueAge;
        return $this;
    }

    /**
     * Gets as defaultValueAnnotation
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\AnnotationType
     */
    public function getDefaultValueAnnotation()
    {
        return $this->defaultValueAnnotation;
    }

    /**
     * Sets a new defaultValueAnnotation
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\AnnotationType $defaultValueAnnotation
     * @return self
     */
    public function setDefaultValueAnnotation(\TKusy\Hl7FhirR4\AnnotationType $defaultValueAnnotation)
    {
        $this->defaultValueAnnotation = $defaultValueAnnotation;
        return $this;
    }

    /**
     * Gets as defaultValueAttachment
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\AttachmentType
     */
    public function getDefaultValueAttachment()
    {
        return $this->defaultValueAttachment;
    }

    /**
     * Sets a new defaultValueAttachment
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\AttachmentType $defaultValueAttachment
     * @return self
     */
    public function setDefaultValueAttachment(\TKusy\Hl7FhirR4\AttachmentType $defaultValueAttachment)
    {
        $this->defaultValueAttachment = $defaultValueAttachment;
        return $this;
    }

    /**
     * Gets as defaultValueCodeableConcept
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\CodeableConceptType
     */
    public function getDefaultValueCodeableConcept()
    {
        return $this->defaultValueCodeableConcept;
    }

    /**
     * Sets a new defaultValueCodeableConcept
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\CodeableConceptType $defaultValueCodeableConcept
     * @return self
     */
    public function setDefaultValueCodeableConcept(\TKusy\Hl7FhirR4\CodeableConceptType $defaultValueCodeableConcept)
    {
        $this->defaultValueCodeableConcept = $defaultValueCodeableConcept;
        return $this;
    }

    /**
     * Gets as defaultValueCoding
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\CodingType
     */
    public function getDefaultValueCoding()
    {
        return $this->defaultValueCoding;
    }

    /**
     * Sets a new defaultValueCoding
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\CodingType $defaultValueCoding
     * @return self
     */
    public function setDefaultValueCoding(\TKusy\Hl7FhirR4\CodingType $defaultValueCoding)
    {
        $this->defaultValueCoding = $defaultValueCoding;
        return $this;
    }

    /**
     * Gets as defaultValueContactPoint
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\ContactPointType
     */
    public function getDefaultValueContactPoint()
    {
        return $this->defaultValueContactPoint;
    }

    /**
     * Sets a new defaultValueContactPoint
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\ContactPointType $defaultValueContactPoint
     * @return self
     */
    public function setDefaultValueContactPoint(\TKusy\Hl7FhirR4\ContactPointType $defaultValueContactPoint)
    {
        $this->defaultValueContactPoint = $defaultValueContactPoint;
        return $this;
    }

    /**
     * Gets as defaultValueCount
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\CountType
     */
    public function getDefaultValueCount()
    {
        return $this->defaultValueCount;
    }

    /**
     * Sets a new defaultValueCount
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\CountType $defaultValueCount
     * @return self
     */
    public function setDefaultValueCount(\TKusy\Hl7FhirR4\CountType $defaultValueCount)
    {
        $this->defaultValueCount = $defaultValueCount;
        return $this;
    }

    /**
     * Gets as defaultValueDistance
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\DistanceType
     */
    public function getDefaultValueDistance()
    {
        return $this->defaultValueDistance;
    }

    /**
     * Sets a new defaultValueDistance
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\DistanceType $defaultValueDistance
     * @return self
     */
    public function setDefaultValueDistance(\TKusy\Hl7FhirR4\DistanceType $defaultValueDistance)
    {
        $this->defaultValueDistance = $defaultValueDistance;
        return $this;
    }

    /**
     * Gets as defaultValueDuration
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\DurationType
     */
    public function getDefaultValueDuration()
    {
        return $this->defaultValueDuration;
    }

    /**
     * Sets a new defaultValueDuration
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\DurationType $defaultValueDuration
     * @return self
     */
    public function setDefaultValueDuration(\TKusy\Hl7FhirR4\DurationType $defaultValueDuration)
    {
        $this->defaultValueDuration = $defaultValueDuration;
        return $this;
    }

    /**
     * Gets as defaultValueHumanName
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\HumanNameType
     */
    public function getDefaultValueHumanName()
    {
        return $this->defaultValueHumanName;
    }

    /**
     * Sets a new defaultValueHumanName
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\HumanNameType $defaultValueHumanName
     * @return self
     */
    public function setDefaultValueHumanName(\TKusy\Hl7FhirR4\HumanNameType $defaultValueHumanName)
    {
        $this->defaultValueHumanName = $defaultValueHumanName;
        return $this;
    }

    /**
     * Gets as defaultValueIdentifier
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\IdentifierType
     */
    public function getDefaultValueIdentifier()
    {
        return $this->defaultValueIdentifier;
    }

    /**
     * Sets a new defaultValueIdentifier
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\IdentifierType $defaultValueIdentifier
     * @return self
     */
    public function setDefaultValueIdentifier(\TKusy\Hl7FhirR4\IdentifierType $defaultValueIdentifier)
    {
        $this->defaultValueIdentifier = $defaultValueIdentifier;
        return $this;
    }

    /**
     * Gets as defaultValueMoney
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\MoneyType
     */
    public function getDefaultValueMoney()
    {
        return $this->defaultValueMoney;
    }

    /**
     * Sets a new defaultValueMoney
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\MoneyType $defaultValueMoney
     * @return self
     */
    public function setDefaultValueMoney(\TKusy\Hl7FhirR4\MoneyType $defaultValueMoney)
    {
        $this->defaultValueMoney = $defaultValueMoney;
        return $this;
    }

    /**
     * Gets as defaultValuePeriod
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\PeriodType
     */
    public function getDefaultValuePeriod()
    {
        return $this->defaultValuePeriod;
    }

    /**
     * Sets a new defaultValuePeriod
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\PeriodType $defaultValuePeriod
     * @return self
     */
    public function setDefaultValuePeriod(\TKusy\Hl7FhirR4\PeriodType $defaultValuePeriod)
    {
        $this->defaultValuePeriod = $defaultValuePeriod;
        return $this;
    }

    /**
     * Gets as defaultValueQuantity
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\QuantityType
     */
    public function getDefaultValueQuantity()
    {
        return $this->defaultValueQuantity;
    }

    /**
     * Sets a new defaultValueQuantity
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\QuantityType $defaultValueQuantity
     * @return self
     */
    public function setDefaultValueQuantity(\TKusy\Hl7FhirR4\QuantityType $defaultValueQuantity)
    {
        $this->defaultValueQuantity = $defaultValueQuantity;
        return $this;
    }

    /**
     * Gets as defaultValueRange
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\RangeType
     */
    public function getDefaultValueRange()
    {
        return $this->defaultValueRange;
    }

    /**
     * Sets a new defaultValueRange
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\RangeType $defaultValueRange
     * @return self
     */
    public function setDefaultValueRange(\TKusy\Hl7FhirR4\RangeType $defaultValueRange)
    {
        $this->defaultValueRange = $defaultValueRange;
        return $this;
    }

    /**
     * Gets as defaultValueRatio
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\RatioType
     */
    public function getDefaultValueRatio()
    {
        return $this->defaultValueRatio;
    }

    /**
     * Sets a new defaultValueRatio
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\RatioType $defaultValueRatio
     * @return self
     */
    public function setDefaultValueRatio(\TKusy\Hl7FhirR4\RatioType $defaultValueRatio)
    {
        $this->defaultValueRatio = $defaultValueRatio;
        return $this;
    }

    /**
     * Gets as defaultValueReference
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\ReferenceType
     */
    public function getDefaultValueReference()
    {
        return $this->defaultValueReference;
    }

    /**
     * Sets a new defaultValueReference
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\ReferenceType $defaultValueReference
     * @return self
     */
    public function setDefaultValueReference(\TKusy\Hl7FhirR4\ReferenceType $defaultValueReference)
    {
        $this->defaultValueReference = $defaultValueReference;
        return $this;
    }

    /**
     * Gets as defaultValueSampledData
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\SampledDataType
     */
    public function getDefaultValueSampledData()
    {
        return $this->defaultValueSampledData;
    }

    /**
     * Sets a new defaultValueSampledData
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\SampledDataType $defaultValueSampledData
     * @return self
     */
    public function setDefaultValueSampledData(\TKusy\Hl7FhirR4\SampledDataType $defaultValueSampledData)
    {
        $this->defaultValueSampledData = $defaultValueSampledData;
        return $this;
    }

    /**
     * Gets as defaultValueSignature
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\SignatureType
     */
    public function getDefaultValueSignature()
    {
        return $this->defaultValueSignature;
    }

    /**
     * Sets a new defaultValueSignature
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\SignatureType $defaultValueSignature
     * @return self
     */
    public function setDefaultValueSignature(\TKusy\Hl7FhirR4\SignatureType $defaultValueSignature)
    {
        $this->defaultValueSignature = $defaultValueSignature;
        return $this;
    }

    /**
     * Gets as defaultValueTiming
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\TimingType
     */
    public function getDefaultValueTiming()
    {
        return $this->defaultValueTiming;
    }

    /**
     * Sets a new defaultValueTiming
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\TimingType $defaultValueTiming
     * @return self
     */
    public function setDefaultValueTiming(\TKusy\Hl7FhirR4\TimingType $defaultValueTiming)
    {
        $this->defaultValueTiming = $defaultValueTiming;
        return $this;
    }

    /**
     * Gets as defaultValueContactDetail
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\ContactDetailType
     */
    public function getDefaultValueContactDetail()
    {
        return $this->defaultValueContactDetail;
    }

    /**
     * Sets a new defaultValueContactDetail
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\ContactDetailType $defaultValueContactDetail
     * @return self
     */
    public function setDefaultValueContactDetail(\TKusy\Hl7FhirR4\ContactDetailType $defaultValueContactDetail)
    {
        $this->defaultValueContactDetail = $defaultValueContactDetail;
        return $this;
    }

    /**
     * Gets as defaultValueContributor
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\ContributorType
     */
    public function getDefaultValueContributor()
    {
        return $this->defaultValueContributor;
    }

    /**
     * Sets a new defaultValueContributor
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\ContributorType $defaultValueContributor
     * @return self
     */
    public function setDefaultValueContributor(\TKusy\Hl7FhirR4\ContributorType $defaultValueContributor)
    {
        $this->defaultValueContributor = $defaultValueContributor;
        return $this;
    }

    /**
     * Gets as defaultValueDataRequirement
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\DataRequirementType
     */
    public function getDefaultValueDataRequirement()
    {
        return $this->defaultValueDataRequirement;
    }

    /**
     * Sets a new defaultValueDataRequirement
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\DataRequirementType $defaultValueDataRequirement
     * @return self
     */
    public function setDefaultValueDataRequirement(\TKusy\Hl7FhirR4\DataRequirementType $defaultValueDataRequirement)
    {
        $this->defaultValueDataRequirement = $defaultValueDataRequirement;
        return $this;
    }

    /**
     * Gets as defaultValueExpression
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\ExpressionType
     */
    public function getDefaultValueExpression()
    {
        return $this->defaultValueExpression;
    }

    /**
     * Sets a new defaultValueExpression
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\ExpressionType $defaultValueExpression
     * @return self
     */
    public function setDefaultValueExpression(\TKusy\Hl7FhirR4\ExpressionType $defaultValueExpression)
    {
        $this->defaultValueExpression = $defaultValueExpression;
        return $this;
    }

    /**
     * Gets as defaultValueParameterDefinition
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\ParameterDefinitionType
     */
    public function getDefaultValueParameterDefinition()
    {
        return $this->defaultValueParameterDefinition;
    }

    /**
     * Sets a new defaultValueParameterDefinition
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\ParameterDefinitionType $defaultValueParameterDefinition
     * @return self
     */
    public function setDefaultValueParameterDefinition(\TKusy\Hl7FhirR4\ParameterDefinitionType $defaultValueParameterDefinition)
    {
        $this->defaultValueParameterDefinition = $defaultValueParameterDefinition;
        return $this;
    }

    /**
     * Gets as defaultValueRelatedArtifact
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\RelatedArtifactType
     */
    public function getDefaultValueRelatedArtifact()
    {
        return $this->defaultValueRelatedArtifact;
    }

    /**
     * Sets a new defaultValueRelatedArtifact
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\RelatedArtifactType $defaultValueRelatedArtifact
     * @return self
     */
    public function setDefaultValueRelatedArtifact(\TKusy\Hl7FhirR4\RelatedArtifactType $defaultValueRelatedArtifact)
    {
        $this->defaultValueRelatedArtifact = $defaultValueRelatedArtifact;
        return $this;
    }

    /**
     * Gets as defaultValueTriggerDefinition
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\TriggerDefinitionType
     */
    public function getDefaultValueTriggerDefinition()
    {
        return $this->defaultValueTriggerDefinition;
    }

    /**
     * Sets a new defaultValueTriggerDefinition
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\TriggerDefinitionType $defaultValueTriggerDefinition
     * @return self
     */
    public function setDefaultValueTriggerDefinition(\TKusy\Hl7FhirR4\TriggerDefinitionType $defaultValueTriggerDefinition)
    {
        $this->defaultValueTriggerDefinition = $defaultValueTriggerDefinition;
        return $this;
    }

    /**
     * Gets as defaultValueUsageContext
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\UsageContextType
     */
    public function getDefaultValueUsageContext()
    {
        return $this->defaultValueUsageContext;
    }

    /**
     * Sets a new defaultValueUsageContext
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\UsageContextType $defaultValueUsageContext
     * @return self
     */
    public function setDefaultValueUsageContext(\TKusy\Hl7FhirR4\UsageContextType $defaultValueUsageContext)
    {
        $this->defaultValueUsageContext = $defaultValueUsageContext;
        return $this;
    }

    /**
     * Gets as defaultValueDosage
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\DosageType
     */
    public function getDefaultValueDosage()
    {
        return $this->defaultValueDosage;
    }

    /**
     * Sets a new defaultValueDosage
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\DosageType $defaultValueDosage
     * @return self
     */
    public function setDefaultValueDosage(\TKusy\Hl7FhirR4\DosageType $defaultValueDosage)
    {
        $this->defaultValueDosage = $defaultValueDosage;
        return $this;
    }

    /**
     * Gets as defaultValueMeta
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\MetaType
     */
    public function getDefaultValueMeta()
    {
        return $this->defaultValueMeta;
    }

    /**
     * Sets a new defaultValueMeta
     *
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\MetaType $defaultValueMeta
     * @return self
     */
    public function setDefaultValueMeta(\TKusy\Hl7FhirR4\MetaType $defaultValueMeta)
    {
        $this->defaultValueMeta = $defaultValueMeta;
        return $this;
    }

    /**
     * Gets as meaningWhenMissing
     *
     * The Implicit meaning that is to be understood when this element is missing (e.g. 'when this element is missing, the period is ongoing').
     *
     * @return \TKusy\Hl7FhirR4\MarkdownType
     */
    public function getMeaningWhenMissing()
    {
        return $this->meaningWhenMissing;
    }

    /**
     * Sets a new meaningWhenMissing
     *
     * The Implicit meaning that is to be understood when this element is missing (e.g. 'when this element is missing, the period is ongoing').
     *
     * @param \TKusy\Hl7FhirR4\MarkdownType $meaningWhenMissing
     * @return self
     */
    public function setMeaningWhenMissing(\TKusy\Hl7FhirR4\MarkdownType $meaningWhenMissing)
    {
        $this->meaningWhenMissing = $meaningWhenMissing;
        return $this;
    }

    /**
     * Gets as orderMeaning
     *
     * If present, indicates that the order of the repeating element has meaning and describes what that meaning is. If absent, it means that the order of the element has no meaning.
     *
     * @return \TKusy\Hl7FhirR4\StringType
     */
    public function getOrderMeaning()
    {
        return $this->orderMeaning;
    }

    /**
     * Sets a new orderMeaning
     *
     * If present, indicates that the order of the repeating element has meaning and describes what that meaning is. If absent, it means that the order of the element has no meaning.
     *
     * @param \TKusy\Hl7FhirR4\StringType $orderMeaning
     * @return self
     */
    public function setOrderMeaning(\TKusy\Hl7FhirR4\StringType $orderMeaning)
    {
        $this->orderMeaning = $orderMeaning;
        return $this;
    }

    /**
     * Gets as fixedBase64Binary
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\Base64BinaryType
     */
    public function getFixedBase64Binary()
    {
        return $this->fixedBase64Binary;
    }

    /**
     * Sets a new fixedBase64Binary
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\Base64BinaryType $fixedBase64Binary
     * @return self
     */
    public function setFixedBase64Binary(\TKusy\Hl7FhirR4\Base64BinaryType $fixedBase64Binary)
    {
        $this->fixedBase64Binary = $fixedBase64Binary;
        return $this;
    }

    /**
     * Gets as fixedBoolean
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\BooleanType
     */
    public function getFixedBoolean()
    {
        return $this->fixedBoolean;
    }

    /**
     * Sets a new fixedBoolean
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\BooleanType $fixedBoolean
     * @return self
     */
    public function setFixedBoolean(\TKusy\Hl7FhirR4\BooleanType $fixedBoolean)
    {
        $this->fixedBoolean = $fixedBoolean;
        return $this;
    }

    /**
     * Gets as fixedCanonical
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\CanonicalType
     */
    public function getFixedCanonical()
    {
        return $this->fixedCanonical;
    }

    /**
     * Sets a new fixedCanonical
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\CanonicalType $fixedCanonical
     * @return self
     */
    public function setFixedCanonical(\TKusy\Hl7FhirR4\CanonicalType $fixedCanonical)
    {
        $this->fixedCanonical = $fixedCanonical;
        return $this;
    }

    /**
     * Gets as fixedCode
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\CodeType
     */
    public function getFixedCode()
    {
        return $this->fixedCode;
    }

    /**
     * Sets a new fixedCode
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\CodeType $fixedCode
     * @return self
     */
    public function setFixedCode(\TKusy\Hl7FhirR4\CodeType $fixedCode)
    {
        $this->fixedCode = $fixedCode;
        return $this;
    }

    /**
     * Gets as fixedDate
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\DateType
     */
    public function getFixedDate()
    {
        return $this->fixedDate;
    }

    /**
     * Sets a new fixedDate
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\DateType $fixedDate
     * @return self
     */
    public function setFixedDate(\TKusy\Hl7FhirR4\DateType $fixedDate)
    {
        $this->fixedDate = $fixedDate;
        return $this;
    }

    /**
     * Gets as fixedDateTime
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\DateTimeType
     */
    public function getFixedDateTime()
    {
        return $this->fixedDateTime;
    }

    /**
     * Sets a new fixedDateTime
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\DateTimeType $fixedDateTime
     * @return self
     */
    public function setFixedDateTime(\TKusy\Hl7FhirR4\DateTimeType $fixedDateTime)
    {
        $this->fixedDateTime = $fixedDateTime;
        return $this;
    }

    /**
     * Gets as fixedDecimal
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\DecimalType
     */
    public function getFixedDecimal()
    {
        return $this->fixedDecimal;
    }

    /**
     * Sets a new fixedDecimal
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\DecimalType $fixedDecimal
     * @return self
     */
    public function setFixedDecimal(\TKusy\Hl7FhirR4\DecimalType $fixedDecimal)
    {
        $this->fixedDecimal = $fixedDecimal;
        return $this;
    }

    /**
     * Gets as fixedId
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\IdType
     */
    public function getFixedId()
    {
        return $this->fixedId;
    }

    /**
     * Sets a new fixedId
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\IdType $fixedId
     * @return self
     */
    public function setFixedId(\TKusy\Hl7FhirR4\IdType $fixedId)
    {
        $this->fixedId = $fixedId;
        return $this;
    }

    /**
     * Gets as fixedInstant
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\InstantType
     */
    public function getFixedInstant()
    {
        return $this->fixedInstant;
    }

    /**
     * Sets a new fixedInstant
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\InstantType $fixedInstant
     * @return self
     */
    public function setFixedInstant(\TKusy\Hl7FhirR4\InstantType $fixedInstant)
    {
        $this->fixedInstant = $fixedInstant;
        return $this;
    }

    /**
     * Gets as fixedInteger
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\IntegerType
     */
    public function getFixedInteger()
    {
        return $this->fixedInteger;
    }

    /**
     * Sets a new fixedInteger
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\IntegerType $fixedInteger
     * @return self
     */
    public function setFixedInteger(\TKusy\Hl7FhirR4\IntegerType $fixedInteger)
    {
        $this->fixedInteger = $fixedInteger;
        return $this;
    }

    /**
     * Gets as fixedMarkdown
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\MarkdownType
     */
    public function getFixedMarkdown()
    {
        return $this->fixedMarkdown;
    }

    /**
     * Sets a new fixedMarkdown
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\MarkdownType $fixedMarkdown
     * @return self
     */
    public function setFixedMarkdown(\TKusy\Hl7FhirR4\MarkdownType $fixedMarkdown)
    {
        $this->fixedMarkdown = $fixedMarkdown;
        return $this;
    }

    /**
     * Gets as fixedOid
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\OidType
     */
    public function getFixedOid()
    {
        return $this->fixedOid;
    }

    /**
     * Sets a new fixedOid
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\OidType $fixedOid
     * @return self
     */
    public function setFixedOid(\TKusy\Hl7FhirR4\OidType $fixedOid)
    {
        $this->fixedOid = $fixedOid;
        return $this;
    }

    /**
     * Gets as fixedPositiveInt
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\PositiveIntType
     */
    public function getFixedPositiveInt()
    {
        return $this->fixedPositiveInt;
    }

    /**
     * Sets a new fixedPositiveInt
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\PositiveIntType $fixedPositiveInt
     * @return self
     */
    public function setFixedPositiveInt(\TKusy\Hl7FhirR4\PositiveIntType $fixedPositiveInt)
    {
        $this->fixedPositiveInt = $fixedPositiveInt;
        return $this;
    }

    /**
     * Gets as fixedString
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\StringType
     */
    public function getFixedString()
    {
        return $this->fixedString;
    }

    /**
     * Sets a new fixedString
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\StringType $fixedString
     * @return self
     */
    public function setFixedString(\TKusy\Hl7FhirR4\StringType $fixedString)
    {
        $this->fixedString = $fixedString;
        return $this;
    }

    /**
     * Gets as fixedTime
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\TimeType
     */
    public function getFixedTime()
    {
        return $this->fixedTime;
    }

    /**
     * Sets a new fixedTime
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\TimeType $fixedTime
     * @return self
     */
    public function setFixedTime(\TKusy\Hl7FhirR4\TimeType $fixedTime)
    {
        $this->fixedTime = $fixedTime;
        return $this;
    }

    /**
     * Gets as fixedUnsignedInt
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\UnsignedIntType
     */
    public function getFixedUnsignedInt()
    {
        return $this->fixedUnsignedInt;
    }

    /**
     * Sets a new fixedUnsignedInt
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\UnsignedIntType $fixedUnsignedInt
     * @return self
     */
    public function setFixedUnsignedInt(\TKusy\Hl7FhirR4\UnsignedIntType $fixedUnsignedInt)
    {
        $this->fixedUnsignedInt = $fixedUnsignedInt;
        return $this;
    }

    /**
     * Gets as fixedUri
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\UriType
     */
    public function getFixedUri()
    {
        return $this->fixedUri;
    }

    /**
     * Sets a new fixedUri
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\UriType $fixedUri
     * @return self
     */
    public function setFixedUri(\TKusy\Hl7FhirR4\UriType $fixedUri)
    {
        $this->fixedUri = $fixedUri;
        return $this;
    }

    /**
     * Gets as fixedUrl
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\UrlType
     */
    public function getFixedUrl()
    {
        return $this->fixedUrl;
    }

    /**
     * Sets a new fixedUrl
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\UrlType $fixedUrl
     * @return self
     */
    public function setFixedUrl(\TKusy\Hl7FhirR4\UrlType $fixedUrl)
    {
        $this->fixedUrl = $fixedUrl;
        return $this;
    }

    /**
     * Gets as fixedUuid
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\UuidType
     */
    public function getFixedUuid()
    {
        return $this->fixedUuid;
    }

    /**
     * Sets a new fixedUuid
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\UuidType $fixedUuid
     * @return self
     */
    public function setFixedUuid(\TKusy\Hl7FhirR4\UuidType $fixedUuid)
    {
        $this->fixedUuid = $fixedUuid;
        return $this;
    }

    /**
     * Gets as fixedAddress
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\AddressType
     */
    public function getFixedAddress()
    {
        return $this->fixedAddress;
    }

    /**
     * Sets a new fixedAddress
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\AddressType $fixedAddress
     * @return self
     */
    public function setFixedAddress(\TKusy\Hl7FhirR4\AddressType $fixedAddress)
    {
        $this->fixedAddress = $fixedAddress;
        return $this;
    }

    /**
     * Gets as fixedAge
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\AgeType
     */
    public function getFixedAge()
    {
        return $this->fixedAge;
    }

    /**
     * Sets a new fixedAge
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\AgeType $fixedAge
     * @return self
     */
    public function setFixedAge(\TKusy\Hl7FhirR4\AgeType $fixedAge)
    {
        $this->fixedAge = $fixedAge;
        return $this;
    }

    /**
     * Gets as fixedAnnotation
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\AnnotationType
     */
    public function getFixedAnnotation()
    {
        return $this->fixedAnnotation;
    }

    /**
     * Sets a new fixedAnnotation
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\AnnotationType $fixedAnnotation
     * @return self
     */
    public function setFixedAnnotation(\TKusy\Hl7FhirR4\AnnotationType $fixedAnnotation)
    {
        $this->fixedAnnotation = $fixedAnnotation;
        return $this;
    }

    /**
     * Gets as fixedAttachment
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\AttachmentType
     */
    public function getFixedAttachment()
    {
        return $this->fixedAttachment;
    }

    /**
     * Sets a new fixedAttachment
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\AttachmentType $fixedAttachment
     * @return self
     */
    public function setFixedAttachment(\TKusy\Hl7FhirR4\AttachmentType $fixedAttachment)
    {
        $this->fixedAttachment = $fixedAttachment;
        return $this;
    }

    /**
     * Gets as fixedCodeableConcept
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\CodeableConceptType
     */
    public function getFixedCodeableConcept()
    {
        return $this->fixedCodeableConcept;
    }

    /**
     * Sets a new fixedCodeableConcept
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\CodeableConceptType $fixedCodeableConcept
     * @return self
     */
    public function setFixedCodeableConcept(\TKusy\Hl7FhirR4\CodeableConceptType $fixedCodeableConcept)
    {
        $this->fixedCodeableConcept = $fixedCodeableConcept;
        return $this;
    }

    /**
     * Gets as fixedCoding
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\CodingType
     */
    public function getFixedCoding()
    {
        return $this->fixedCoding;
    }

    /**
     * Sets a new fixedCoding
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\CodingType $fixedCoding
     * @return self
     */
    public function setFixedCoding(\TKusy\Hl7FhirR4\CodingType $fixedCoding)
    {
        $this->fixedCoding = $fixedCoding;
        return $this;
    }

    /**
     * Gets as fixedContactPoint
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\ContactPointType
     */
    public function getFixedContactPoint()
    {
        return $this->fixedContactPoint;
    }

    /**
     * Sets a new fixedContactPoint
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\ContactPointType $fixedContactPoint
     * @return self
     */
    public function setFixedContactPoint(\TKusy\Hl7FhirR4\ContactPointType $fixedContactPoint)
    {
        $this->fixedContactPoint = $fixedContactPoint;
        return $this;
    }

    /**
     * Gets as fixedCount
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\CountType
     */
    public function getFixedCount()
    {
        return $this->fixedCount;
    }

    /**
     * Sets a new fixedCount
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\CountType $fixedCount
     * @return self
     */
    public function setFixedCount(\TKusy\Hl7FhirR4\CountType $fixedCount)
    {
        $this->fixedCount = $fixedCount;
        return $this;
    }

    /**
     * Gets as fixedDistance
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\DistanceType
     */
    public function getFixedDistance()
    {
        return $this->fixedDistance;
    }

    /**
     * Sets a new fixedDistance
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\DistanceType $fixedDistance
     * @return self
     */
    public function setFixedDistance(\TKusy\Hl7FhirR4\DistanceType $fixedDistance)
    {
        $this->fixedDistance = $fixedDistance;
        return $this;
    }

    /**
     * Gets as fixedDuration
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\DurationType
     */
    public function getFixedDuration()
    {
        return $this->fixedDuration;
    }

    /**
     * Sets a new fixedDuration
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\DurationType $fixedDuration
     * @return self
     */
    public function setFixedDuration(\TKusy\Hl7FhirR4\DurationType $fixedDuration)
    {
        $this->fixedDuration = $fixedDuration;
        return $this;
    }

    /**
     * Gets as fixedHumanName
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\HumanNameType
     */
    public function getFixedHumanName()
    {
        return $this->fixedHumanName;
    }

    /**
     * Sets a new fixedHumanName
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\HumanNameType $fixedHumanName
     * @return self
     */
    public function setFixedHumanName(\TKusy\Hl7FhirR4\HumanNameType $fixedHumanName)
    {
        $this->fixedHumanName = $fixedHumanName;
        return $this;
    }

    /**
     * Gets as fixedIdentifier
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\IdentifierType
     */
    public function getFixedIdentifier()
    {
        return $this->fixedIdentifier;
    }

    /**
     * Sets a new fixedIdentifier
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\IdentifierType $fixedIdentifier
     * @return self
     */
    public function setFixedIdentifier(\TKusy\Hl7FhirR4\IdentifierType $fixedIdentifier)
    {
        $this->fixedIdentifier = $fixedIdentifier;
        return $this;
    }

    /**
     * Gets as fixedMoney
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\MoneyType
     */
    public function getFixedMoney()
    {
        return $this->fixedMoney;
    }

    /**
     * Sets a new fixedMoney
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\MoneyType $fixedMoney
     * @return self
     */
    public function setFixedMoney(\TKusy\Hl7FhirR4\MoneyType $fixedMoney)
    {
        $this->fixedMoney = $fixedMoney;
        return $this;
    }

    /**
     * Gets as fixedPeriod
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\PeriodType
     */
    public function getFixedPeriod()
    {
        return $this->fixedPeriod;
    }

    /**
     * Sets a new fixedPeriod
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\PeriodType $fixedPeriod
     * @return self
     */
    public function setFixedPeriod(\TKusy\Hl7FhirR4\PeriodType $fixedPeriod)
    {
        $this->fixedPeriod = $fixedPeriod;
        return $this;
    }

    /**
     * Gets as fixedQuantity
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\QuantityType
     */
    public function getFixedQuantity()
    {
        return $this->fixedQuantity;
    }

    /**
     * Sets a new fixedQuantity
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\QuantityType $fixedQuantity
     * @return self
     */
    public function setFixedQuantity(\TKusy\Hl7FhirR4\QuantityType $fixedQuantity)
    {
        $this->fixedQuantity = $fixedQuantity;
        return $this;
    }

    /**
     * Gets as fixedRange
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\RangeType
     */
    public function getFixedRange()
    {
        return $this->fixedRange;
    }

    /**
     * Sets a new fixedRange
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\RangeType $fixedRange
     * @return self
     */
    public function setFixedRange(\TKusy\Hl7FhirR4\RangeType $fixedRange)
    {
        $this->fixedRange = $fixedRange;
        return $this;
    }

    /**
     * Gets as fixedRatio
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\RatioType
     */
    public function getFixedRatio()
    {
        return $this->fixedRatio;
    }

    /**
     * Sets a new fixedRatio
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\RatioType $fixedRatio
     * @return self
     */
    public function setFixedRatio(\TKusy\Hl7FhirR4\RatioType $fixedRatio)
    {
        $this->fixedRatio = $fixedRatio;
        return $this;
    }

    /**
     * Gets as fixedReference
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\ReferenceType
     */
    public function getFixedReference()
    {
        return $this->fixedReference;
    }

    /**
     * Sets a new fixedReference
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\ReferenceType $fixedReference
     * @return self
     */
    public function setFixedReference(\TKusy\Hl7FhirR4\ReferenceType $fixedReference)
    {
        $this->fixedReference = $fixedReference;
        return $this;
    }

    /**
     * Gets as fixedSampledData
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\SampledDataType
     */
    public function getFixedSampledData()
    {
        return $this->fixedSampledData;
    }

    /**
     * Sets a new fixedSampledData
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\SampledDataType $fixedSampledData
     * @return self
     */
    public function setFixedSampledData(\TKusy\Hl7FhirR4\SampledDataType $fixedSampledData)
    {
        $this->fixedSampledData = $fixedSampledData;
        return $this;
    }

    /**
     * Gets as fixedSignature
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\SignatureType
     */
    public function getFixedSignature()
    {
        return $this->fixedSignature;
    }

    /**
     * Sets a new fixedSignature
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\SignatureType $fixedSignature
     * @return self
     */
    public function setFixedSignature(\TKusy\Hl7FhirR4\SignatureType $fixedSignature)
    {
        $this->fixedSignature = $fixedSignature;
        return $this;
    }

    /**
     * Gets as fixedTiming
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\TimingType
     */
    public function getFixedTiming()
    {
        return $this->fixedTiming;
    }

    /**
     * Sets a new fixedTiming
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\TimingType $fixedTiming
     * @return self
     */
    public function setFixedTiming(\TKusy\Hl7FhirR4\TimingType $fixedTiming)
    {
        $this->fixedTiming = $fixedTiming;
        return $this;
    }

    /**
     * Gets as fixedContactDetail
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\ContactDetailType
     */
    public function getFixedContactDetail()
    {
        return $this->fixedContactDetail;
    }

    /**
     * Sets a new fixedContactDetail
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\ContactDetailType $fixedContactDetail
     * @return self
     */
    public function setFixedContactDetail(\TKusy\Hl7FhirR4\ContactDetailType $fixedContactDetail)
    {
        $this->fixedContactDetail = $fixedContactDetail;
        return $this;
    }

    /**
     * Gets as fixedContributor
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\ContributorType
     */
    public function getFixedContributor()
    {
        return $this->fixedContributor;
    }

    /**
     * Sets a new fixedContributor
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\ContributorType $fixedContributor
     * @return self
     */
    public function setFixedContributor(\TKusy\Hl7FhirR4\ContributorType $fixedContributor)
    {
        $this->fixedContributor = $fixedContributor;
        return $this;
    }

    /**
     * Gets as fixedDataRequirement
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\DataRequirementType
     */
    public function getFixedDataRequirement()
    {
        return $this->fixedDataRequirement;
    }

    /**
     * Sets a new fixedDataRequirement
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\DataRequirementType $fixedDataRequirement
     * @return self
     */
    public function setFixedDataRequirement(\TKusy\Hl7FhirR4\DataRequirementType $fixedDataRequirement)
    {
        $this->fixedDataRequirement = $fixedDataRequirement;
        return $this;
    }

    /**
     * Gets as fixedExpression
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\ExpressionType
     */
    public function getFixedExpression()
    {
        return $this->fixedExpression;
    }

    /**
     * Sets a new fixedExpression
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\ExpressionType $fixedExpression
     * @return self
     */
    public function setFixedExpression(\TKusy\Hl7FhirR4\ExpressionType $fixedExpression)
    {
        $this->fixedExpression = $fixedExpression;
        return $this;
    }

    /**
     * Gets as fixedParameterDefinition
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\ParameterDefinitionType
     */
    public function getFixedParameterDefinition()
    {
        return $this->fixedParameterDefinition;
    }

    /**
     * Sets a new fixedParameterDefinition
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\ParameterDefinitionType $fixedParameterDefinition
     * @return self
     */
    public function setFixedParameterDefinition(\TKusy\Hl7FhirR4\ParameterDefinitionType $fixedParameterDefinition)
    {
        $this->fixedParameterDefinition = $fixedParameterDefinition;
        return $this;
    }

    /**
     * Gets as fixedRelatedArtifact
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\RelatedArtifactType
     */
    public function getFixedRelatedArtifact()
    {
        return $this->fixedRelatedArtifact;
    }

    /**
     * Sets a new fixedRelatedArtifact
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\RelatedArtifactType $fixedRelatedArtifact
     * @return self
     */
    public function setFixedRelatedArtifact(\TKusy\Hl7FhirR4\RelatedArtifactType $fixedRelatedArtifact)
    {
        $this->fixedRelatedArtifact = $fixedRelatedArtifact;
        return $this;
    }

    /**
     * Gets as fixedTriggerDefinition
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\TriggerDefinitionType
     */
    public function getFixedTriggerDefinition()
    {
        return $this->fixedTriggerDefinition;
    }

    /**
     * Sets a new fixedTriggerDefinition
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\TriggerDefinitionType $fixedTriggerDefinition
     * @return self
     */
    public function setFixedTriggerDefinition(\TKusy\Hl7FhirR4\TriggerDefinitionType $fixedTriggerDefinition)
    {
        $this->fixedTriggerDefinition = $fixedTriggerDefinition;
        return $this;
    }

    /**
     * Gets as fixedUsageContext
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\UsageContextType
     */
    public function getFixedUsageContext()
    {
        return $this->fixedUsageContext;
    }

    /**
     * Sets a new fixedUsageContext
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\UsageContextType $fixedUsageContext
     * @return self
     */
    public function setFixedUsageContext(\TKusy\Hl7FhirR4\UsageContextType $fixedUsageContext)
    {
        $this->fixedUsageContext = $fixedUsageContext;
        return $this;
    }

    /**
     * Gets as fixedDosage
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\DosageType
     */
    public function getFixedDosage()
    {
        return $this->fixedDosage;
    }

    /**
     * Sets a new fixedDosage
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\DosageType $fixedDosage
     * @return self
     */
    public function setFixedDosage(\TKusy\Hl7FhirR4\DosageType $fixedDosage)
    {
        $this->fixedDosage = $fixedDosage;
        return $this;
    }

    /**
     * Gets as fixedMeta
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\MetaType
     */
    public function getFixedMeta()
    {
        return $this->fixedMeta;
    }

    /**
     * Sets a new fixedMeta
     *
     * Specifies a value that SHALL be exactly the value for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\MetaType $fixedMeta
     * @return self
     */
    public function setFixedMeta(\TKusy\Hl7FhirR4\MetaType $fixedMeta)
    {
        $this->fixedMeta = $fixedMeta;
        return $this;
    }

    /**
     * Gets as patternBase64Binary
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\Base64BinaryType
     */
    public function getPatternBase64Binary()
    {
        return $this->patternBase64Binary;
    }

    /**
     * Sets a new patternBase64Binary
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\Base64BinaryType $patternBase64Binary
     * @return self
     */
    public function setPatternBase64Binary(\TKusy\Hl7FhirR4\Base64BinaryType $patternBase64Binary)
    {
        $this->patternBase64Binary = $patternBase64Binary;
        return $this;
    }

    /**
     * Gets as patternBoolean
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\BooleanType
     */
    public function getPatternBoolean()
    {
        return $this->patternBoolean;
    }

    /**
     * Sets a new patternBoolean
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\BooleanType $patternBoolean
     * @return self
     */
    public function setPatternBoolean(\TKusy\Hl7FhirR4\BooleanType $patternBoolean)
    {
        $this->patternBoolean = $patternBoolean;
        return $this;
    }

    /**
     * Gets as patternCanonical
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\CanonicalType
     */
    public function getPatternCanonical()
    {
        return $this->patternCanonical;
    }

    /**
     * Sets a new patternCanonical
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\CanonicalType $patternCanonical
     * @return self
     */
    public function setPatternCanonical(\TKusy\Hl7FhirR4\CanonicalType $patternCanonical)
    {
        $this->patternCanonical = $patternCanonical;
        return $this;
    }

    /**
     * Gets as patternCode
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\CodeType
     */
    public function getPatternCode()
    {
        return $this->patternCode;
    }

    /**
     * Sets a new patternCode
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\CodeType $patternCode
     * @return self
     */
    public function setPatternCode(\TKusy\Hl7FhirR4\CodeType $patternCode)
    {
        $this->patternCode = $patternCode;
        return $this;
    }

    /**
     * Gets as patternDate
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\DateType
     */
    public function getPatternDate()
    {
        return $this->patternDate;
    }

    /**
     * Sets a new patternDate
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\DateType $patternDate
     * @return self
     */
    public function setPatternDate(\TKusy\Hl7FhirR4\DateType $patternDate)
    {
        $this->patternDate = $patternDate;
        return $this;
    }

    /**
     * Gets as patternDateTime
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\DateTimeType
     */
    public function getPatternDateTime()
    {
        return $this->patternDateTime;
    }

    /**
     * Sets a new patternDateTime
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\DateTimeType $patternDateTime
     * @return self
     */
    public function setPatternDateTime(\TKusy\Hl7FhirR4\DateTimeType $patternDateTime)
    {
        $this->patternDateTime = $patternDateTime;
        return $this;
    }

    /**
     * Gets as patternDecimal
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\DecimalType
     */
    public function getPatternDecimal()
    {
        return $this->patternDecimal;
    }

    /**
     * Sets a new patternDecimal
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\DecimalType $patternDecimal
     * @return self
     */
    public function setPatternDecimal(\TKusy\Hl7FhirR4\DecimalType $patternDecimal)
    {
        $this->patternDecimal = $patternDecimal;
        return $this;
    }

    /**
     * Gets as patternId
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\IdType
     */
    public function getPatternId()
    {
        return $this->patternId;
    }

    /**
     * Sets a new patternId
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\IdType $patternId
     * @return self
     */
    public function setPatternId(\TKusy\Hl7FhirR4\IdType $patternId)
    {
        $this->patternId = $patternId;
        return $this;
    }

    /**
     * Gets as patternInstant
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\InstantType
     */
    public function getPatternInstant()
    {
        return $this->patternInstant;
    }

    /**
     * Sets a new patternInstant
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\InstantType $patternInstant
     * @return self
     */
    public function setPatternInstant(\TKusy\Hl7FhirR4\InstantType $patternInstant)
    {
        $this->patternInstant = $patternInstant;
        return $this;
    }

    /**
     * Gets as patternInteger
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\IntegerType
     */
    public function getPatternInteger()
    {
        return $this->patternInteger;
    }

    /**
     * Sets a new patternInteger
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\IntegerType $patternInteger
     * @return self
     */
    public function setPatternInteger(\TKusy\Hl7FhirR4\IntegerType $patternInteger)
    {
        $this->patternInteger = $patternInteger;
        return $this;
    }

    /**
     * Gets as patternMarkdown
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\MarkdownType
     */
    public function getPatternMarkdown()
    {
        return $this->patternMarkdown;
    }

    /**
     * Sets a new patternMarkdown
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\MarkdownType $patternMarkdown
     * @return self
     */
    public function setPatternMarkdown(\TKusy\Hl7FhirR4\MarkdownType $patternMarkdown)
    {
        $this->patternMarkdown = $patternMarkdown;
        return $this;
    }

    /**
     * Gets as patternOid
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\OidType
     */
    public function getPatternOid()
    {
        return $this->patternOid;
    }

    /**
     * Sets a new patternOid
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\OidType $patternOid
     * @return self
     */
    public function setPatternOid(\TKusy\Hl7FhirR4\OidType $patternOid)
    {
        $this->patternOid = $patternOid;
        return $this;
    }

    /**
     * Gets as patternPositiveInt
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\PositiveIntType
     */
    public function getPatternPositiveInt()
    {
        return $this->patternPositiveInt;
    }

    /**
     * Sets a new patternPositiveInt
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\PositiveIntType $patternPositiveInt
     * @return self
     */
    public function setPatternPositiveInt(\TKusy\Hl7FhirR4\PositiveIntType $patternPositiveInt)
    {
        $this->patternPositiveInt = $patternPositiveInt;
        return $this;
    }

    /**
     * Gets as patternString
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\StringType
     */
    public function getPatternString()
    {
        return $this->patternString;
    }

    /**
     * Sets a new patternString
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\StringType $patternString
     * @return self
     */
    public function setPatternString(\TKusy\Hl7FhirR4\StringType $patternString)
    {
        $this->patternString = $patternString;
        return $this;
    }

    /**
     * Gets as patternTime
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\TimeType
     */
    public function getPatternTime()
    {
        return $this->patternTime;
    }

    /**
     * Sets a new patternTime
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\TimeType $patternTime
     * @return self
     */
    public function setPatternTime(\TKusy\Hl7FhirR4\TimeType $patternTime)
    {
        $this->patternTime = $patternTime;
        return $this;
    }

    /**
     * Gets as patternUnsignedInt
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\UnsignedIntType
     */
    public function getPatternUnsignedInt()
    {
        return $this->patternUnsignedInt;
    }

    /**
     * Sets a new patternUnsignedInt
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\UnsignedIntType $patternUnsignedInt
     * @return self
     */
    public function setPatternUnsignedInt(\TKusy\Hl7FhirR4\UnsignedIntType $patternUnsignedInt)
    {
        $this->patternUnsignedInt = $patternUnsignedInt;
        return $this;
    }

    /**
     * Gets as patternUri
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\UriType
     */
    public function getPatternUri()
    {
        return $this->patternUri;
    }

    /**
     * Sets a new patternUri
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\UriType $patternUri
     * @return self
     */
    public function setPatternUri(\TKusy\Hl7FhirR4\UriType $patternUri)
    {
        $this->patternUri = $patternUri;
        return $this;
    }

    /**
     * Gets as patternUrl
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\UrlType
     */
    public function getPatternUrl()
    {
        return $this->patternUrl;
    }

    /**
     * Sets a new patternUrl
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\UrlType $patternUrl
     * @return self
     */
    public function setPatternUrl(\TKusy\Hl7FhirR4\UrlType $patternUrl)
    {
        $this->patternUrl = $patternUrl;
        return $this;
    }

    /**
     * Gets as patternUuid
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\UuidType
     */
    public function getPatternUuid()
    {
        return $this->patternUuid;
    }

    /**
     * Sets a new patternUuid
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\UuidType $patternUuid
     * @return self
     */
    public function setPatternUuid(\TKusy\Hl7FhirR4\UuidType $patternUuid)
    {
        $this->patternUuid = $patternUuid;
        return $this;
    }

    /**
     * Gets as patternAddress
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\AddressType
     */
    public function getPatternAddress()
    {
        return $this->patternAddress;
    }

    /**
     * Sets a new patternAddress
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\AddressType $patternAddress
     * @return self
     */
    public function setPatternAddress(\TKusy\Hl7FhirR4\AddressType $patternAddress)
    {
        $this->patternAddress = $patternAddress;
        return $this;
    }

    /**
     * Gets as patternAge
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\AgeType
     */
    public function getPatternAge()
    {
        return $this->patternAge;
    }

    /**
     * Sets a new patternAge
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\AgeType $patternAge
     * @return self
     */
    public function setPatternAge(\TKusy\Hl7FhirR4\AgeType $patternAge)
    {
        $this->patternAge = $patternAge;
        return $this;
    }

    /**
     * Gets as patternAnnotation
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\AnnotationType
     */
    public function getPatternAnnotation()
    {
        return $this->patternAnnotation;
    }

    /**
     * Sets a new patternAnnotation
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\AnnotationType $patternAnnotation
     * @return self
     */
    public function setPatternAnnotation(\TKusy\Hl7FhirR4\AnnotationType $patternAnnotation)
    {
        $this->patternAnnotation = $patternAnnotation;
        return $this;
    }

    /**
     * Gets as patternAttachment
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\AttachmentType
     */
    public function getPatternAttachment()
    {
        return $this->patternAttachment;
    }

    /**
     * Sets a new patternAttachment
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\AttachmentType $patternAttachment
     * @return self
     */
    public function setPatternAttachment(\TKusy\Hl7FhirR4\AttachmentType $patternAttachment)
    {
        $this->patternAttachment = $patternAttachment;
        return $this;
    }

    /**
     * Gets as patternCodeableConcept
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\CodeableConceptType
     */
    public function getPatternCodeableConcept()
    {
        return $this->patternCodeableConcept;
    }

    /**
     * Sets a new patternCodeableConcept
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\CodeableConceptType $patternCodeableConcept
     * @return self
     */
    public function setPatternCodeableConcept(\TKusy\Hl7FhirR4\CodeableConceptType $patternCodeableConcept)
    {
        $this->patternCodeableConcept = $patternCodeableConcept;
        return $this;
    }

    /**
     * Gets as patternCoding
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\CodingType
     */
    public function getPatternCoding()
    {
        return $this->patternCoding;
    }

    /**
     * Sets a new patternCoding
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\CodingType $patternCoding
     * @return self
     */
    public function setPatternCoding(\TKusy\Hl7FhirR4\CodingType $patternCoding)
    {
        $this->patternCoding = $patternCoding;
        return $this;
    }

    /**
     * Gets as patternContactPoint
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\ContactPointType
     */
    public function getPatternContactPoint()
    {
        return $this->patternContactPoint;
    }

    /**
     * Sets a new patternContactPoint
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\ContactPointType $patternContactPoint
     * @return self
     */
    public function setPatternContactPoint(\TKusy\Hl7FhirR4\ContactPointType $patternContactPoint)
    {
        $this->patternContactPoint = $patternContactPoint;
        return $this;
    }

    /**
     * Gets as patternCount
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\CountType
     */
    public function getPatternCount()
    {
        return $this->patternCount;
    }

    /**
     * Sets a new patternCount
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\CountType $patternCount
     * @return self
     */
    public function setPatternCount(\TKusy\Hl7FhirR4\CountType $patternCount)
    {
        $this->patternCount = $patternCount;
        return $this;
    }

    /**
     * Gets as patternDistance
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\DistanceType
     */
    public function getPatternDistance()
    {
        return $this->patternDistance;
    }

    /**
     * Sets a new patternDistance
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\DistanceType $patternDistance
     * @return self
     */
    public function setPatternDistance(\TKusy\Hl7FhirR4\DistanceType $patternDistance)
    {
        $this->patternDistance = $patternDistance;
        return $this;
    }

    /**
     * Gets as patternDuration
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\DurationType
     */
    public function getPatternDuration()
    {
        return $this->patternDuration;
    }

    /**
     * Sets a new patternDuration
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\DurationType $patternDuration
     * @return self
     */
    public function setPatternDuration(\TKusy\Hl7FhirR4\DurationType $patternDuration)
    {
        $this->patternDuration = $patternDuration;
        return $this;
    }

    /**
     * Gets as patternHumanName
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\HumanNameType
     */
    public function getPatternHumanName()
    {
        return $this->patternHumanName;
    }

    /**
     * Sets a new patternHumanName
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\HumanNameType $patternHumanName
     * @return self
     */
    public function setPatternHumanName(\TKusy\Hl7FhirR4\HumanNameType $patternHumanName)
    {
        $this->patternHumanName = $patternHumanName;
        return $this;
    }

    /**
     * Gets as patternIdentifier
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\IdentifierType
     */
    public function getPatternIdentifier()
    {
        return $this->patternIdentifier;
    }

    /**
     * Sets a new patternIdentifier
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\IdentifierType $patternIdentifier
     * @return self
     */
    public function setPatternIdentifier(\TKusy\Hl7FhirR4\IdentifierType $patternIdentifier)
    {
        $this->patternIdentifier = $patternIdentifier;
        return $this;
    }

    /**
     * Gets as patternMoney
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\MoneyType
     */
    public function getPatternMoney()
    {
        return $this->patternMoney;
    }

    /**
     * Sets a new patternMoney
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\MoneyType $patternMoney
     * @return self
     */
    public function setPatternMoney(\TKusy\Hl7FhirR4\MoneyType $patternMoney)
    {
        $this->patternMoney = $patternMoney;
        return $this;
    }

    /**
     * Gets as patternPeriod
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\PeriodType
     */
    public function getPatternPeriod()
    {
        return $this->patternPeriod;
    }

    /**
     * Sets a new patternPeriod
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\PeriodType $patternPeriod
     * @return self
     */
    public function setPatternPeriod(\TKusy\Hl7FhirR4\PeriodType $patternPeriod)
    {
        $this->patternPeriod = $patternPeriod;
        return $this;
    }

    /**
     * Gets as patternQuantity
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\QuantityType
     */
    public function getPatternQuantity()
    {
        return $this->patternQuantity;
    }

    /**
     * Sets a new patternQuantity
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\QuantityType $patternQuantity
     * @return self
     */
    public function setPatternQuantity(\TKusy\Hl7FhirR4\QuantityType $patternQuantity)
    {
        $this->patternQuantity = $patternQuantity;
        return $this;
    }

    /**
     * Gets as patternRange
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\RangeType
     */
    public function getPatternRange()
    {
        return $this->patternRange;
    }

    /**
     * Sets a new patternRange
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\RangeType $patternRange
     * @return self
     */
    public function setPatternRange(\TKusy\Hl7FhirR4\RangeType $patternRange)
    {
        $this->patternRange = $patternRange;
        return $this;
    }

    /**
     * Gets as patternRatio
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\RatioType
     */
    public function getPatternRatio()
    {
        return $this->patternRatio;
    }

    /**
     * Sets a new patternRatio
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\RatioType $patternRatio
     * @return self
     */
    public function setPatternRatio(\TKusy\Hl7FhirR4\RatioType $patternRatio)
    {
        $this->patternRatio = $patternRatio;
        return $this;
    }

    /**
     * Gets as patternReference
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\ReferenceType
     */
    public function getPatternReference()
    {
        return $this->patternReference;
    }

    /**
     * Sets a new patternReference
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\ReferenceType $patternReference
     * @return self
     */
    public function setPatternReference(\TKusy\Hl7FhirR4\ReferenceType $patternReference)
    {
        $this->patternReference = $patternReference;
        return $this;
    }

    /**
     * Gets as patternSampledData
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\SampledDataType
     */
    public function getPatternSampledData()
    {
        return $this->patternSampledData;
    }

    /**
     * Sets a new patternSampledData
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\SampledDataType $patternSampledData
     * @return self
     */
    public function setPatternSampledData(\TKusy\Hl7FhirR4\SampledDataType $patternSampledData)
    {
        $this->patternSampledData = $patternSampledData;
        return $this;
    }

    /**
     * Gets as patternSignature
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\SignatureType
     */
    public function getPatternSignature()
    {
        return $this->patternSignature;
    }

    /**
     * Sets a new patternSignature
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\SignatureType $patternSignature
     * @return self
     */
    public function setPatternSignature(\TKusy\Hl7FhirR4\SignatureType $patternSignature)
    {
        $this->patternSignature = $patternSignature;
        return $this;
    }

    /**
     * Gets as patternTiming
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\TimingType
     */
    public function getPatternTiming()
    {
        return $this->patternTiming;
    }

    /**
     * Sets a new patternTiming
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\TimingType $patternTiming
     * @return self
     */
    public function setPatternTiming(\TKusy\Hl7FhirR4\TimingType $patternTiming)
    {
        $this->patternTiming = $patternTiming;
        return $this;
    }

    /**
     * Gets as patternContactDetail
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\ContactDetailType
     */
    public function getPatternContactDetail()
    {
        return $this->patternContactDetail;
    }

    /**
     * Sets a new patternContactDetail
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\ContactDetailType $patternContactDetail
     * @return self
     */
    public function setPatternContactDetail(\TKusy\Hl7FhirR4\ContactDetailType $patternContactDetail)
    {
        $this->patternContactDetail = $patternContactDetail;
        return $this;
    }

    /**
     * Gets as patternContributor
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\ContributorType
     */
    public function getPatternContributor()
    {
        return $this->patternContributor;
    }

    /**
     * Sets a new patternContributor
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\ContributorType $patternContributor
     * @return self
     */
    public function setPatternContributor(\TKusy\Hl7FhirR4\ContributorType $patternContributor)
    {
        $this->patternContributor = $patternContributor;
        return $this;
    }

    /**
     * Gets as patternDataRequirement
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\DataRequirementType
     */
    public function getPatternDataRequirement()
    {
        return $this->patternDataRequirement;
    }

    /**
     * Sets a new patternDataRequirement
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\DataRequirementType $patternDataRequirement
     * @return self
     */
    public function setPatternDataRequirement(\TKusy\Hl7FhirR4\DataRequirementType $patternDataRequirement)
    {
        $this->patternDataRequirement = $patternDataRequirement;
        return $this;
    }

    /**
     * Gets as patternExpression
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\ExpressionType
     */
    public function getPatternExpression()
    {
        return $this->patternExpression;
    }

    /**
     * Sets a new patternExpression
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\ExpressionType $patternExpression
     * @return self
     */
    public function setPatternExpression(\TKusy\Hl7FhirR4\ExpressionType $patternExpression)
    {
        $this->patternExpression = $patternExpression;
        return $this;
    }

    /**
     * Gets as patternParameterDefinition
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\ParameterDefinitionType
     */
    public function getPatternParameterDefinition()
    {
        return $this->patternParameterDefinition;
    }

    /**
     * Sets a new patternParameterDefinition
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\ParameterDefinitionType $patternParameterDefinition
     * @return self
     */
    public function setPatternParameterDefinition(\TKusy\Hl7FhirR4\ParameterDefinitionType $patternParameterDefinition)
    {
        $this->patternParameterDefinition = $patternParameterDefinition;
        return $this;
    }

    /**
     * Gets as patternRelatedArtifact
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\RelatedArtifactType
     */
    public function getPatternRelatedArtifact()
    {
        return $this->patternRelatedArtifact;
    }

    /**
     * Sets a new patternRelatedArtifact
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\RelatedArtifactType $patternRelatedArtifact
     * @return self
     */
    public function setPatternRelatedArtifact(\TKusy\Hl7FhirR4\RelatedArtifactType $patternRelatedArtifact)
    {
        $this->patternRelatedArtifact = $patternRelatedArtifact;
        return $this;
    }

    /**
     * Gets as patternTriggerDefinition
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\TriggerDefinitionType
     */
    public function getPatternTriggerDefinition()
    {
        return $this->patternTriggerDefinition;
    }

    /**
     * Sets a new patternTriggerDefinition
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\TriggerDefinitionType $patternTriggerDefinition
     * @return self
     */
    public function setPatternTriggerDefinition(\TKusy\Hl7FhirR4\TriggerDefinitionType $patternTriggerDefinition)
    {
        $this->patternTriggerDefinition = $patternTriggerDefinition;
        return $this;
    }

    /**
     * Gets as patternUsageContext
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\UsageContextType
     */
    public function getPatternUsageContext()
    {
        return $this->patternUsageContext;
    }

    /**
     * Sets a new patternUsageContext
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\UsageContextType $patternUsageContext
     * @return self
     */
    public function setPatternUsageContext(\TKusy\Hl7FhirR4\UsageContextType $patternUsageContext)
    {
        $this->patternUsageContext = $patternUsageContext;
        return $this;
    }

    /**
     * Gets as patternDosage
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\DosageType
     */
    public function getPatternDosage()
    {
        return $this->patternDosage;
    }

    /**
     * Sets a new patternDosage
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\DosageType $patternDosage
     * @return self
     */
    public function setPatternDosage(\TKusy\Hl7FhirR4\DosageType $patternDosage)
    {
        $this->patternDosage = $patternDosage;
        return $this;
    }

    /**
     * Gets as patternMeta
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @return \TKusy\Hl7FhirR4\MetaType
     */
    public function getPatternMeta()
    {
        return $this->patternMeta;
    }

    /**
     * Sets a new patternMeta
     *
     * Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example. 
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value. (choose any one of the elements, but only one)
     *
     * @param \TKusy\Hl7FhirR4\MetaType $patternMeta
     * @return self
     */
    public function setPatternMeta(\TKusy\Hl7FhirR4\MetaType $patternMeta)
    {
        $this->patternMeta = $patternMeta;
        return $this;
    }

    /**
     * Adds as example
     *
     * A sample value for this element demonstrating the type of information that would typically be found in the element.
     *
     * @return self
     * @param \TKusy\Hl7FhirR4\ElementDefinitionExampleType $example
     */
    public function addToExample(\TKusy\Hl7FhirR4\ElementDefinitionExampleType $example)
    {
        $this->example[] = $example;
        return $this;
    }

    /**
     * isset example
     *
     * A sample value for this element demonstrating the type of information that would typically be found in the element.
     *
     * @param int|string $index
     * @return bool
     */
    public function issetExample($index)
    {
        return isset($this->example[$index]);
    }

    /**
     * unset example
     *
     * A sample value for this element demonstrating the type of information that would typically be found in the element.
     *
     * @param int|string $index
     * @return void
     */
    public function unsetExample($index)
    {
        unset($this->example[$index]);
    }

    /**
     * Gets as example
     *
     * A sample value for this element demonstrating the type of information that would typically be found in the element.
     *
     * @return \TKusy\Hl7FhirR4\ElementDefinitionExampleType[]
     */
    public function getExample()
    {
        return $this->example;
    }

    /**
     * Sets a new example
     *
     * A sample value for this element demonstrating the type of information that would typically be found in the element.
     *
     * @param \TKusy\Hl7FhirR4\ElementDefinitionExampleType[] $example
     * @return self
     */
    public function setExample(array $example)
    {
        $this->example = $example;
        return $this;
    }

    /**
     * Gets as minValueDate
     *
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. (choose any one of minValue*, but only one)
     *
     * @return \TKusy\Hl7FhirR4\DateType
     */
    public function getMinValueDate()
    {
        return $this->minValueDate;
    }

    /**
     * Sets a new minValueDate
     *
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. (choose any one of minValue*, but only one)
     *
     * @param \TKusy\Hl7FhirR4\DateType $minValueDate
     * @return self
     */
    public function setMinValueDate(\TKusy\Hl7FhirR4\DateType $minValueDate)
    {
        $this->minValueDate = $minValueDate;
        return $this;
    }

    /**
     * Gets as minValueDateTime
     *
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. (choose any one of minValue*, but only one)
     *
     * @return \TKusy\Hl7FhirR4\DateTimeType
     */
    public function getMinValueDateTime()
    {
        return $this->minValueDateTime;
    }

    /**
     * Sets a new minValueDateTime
     *
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. (choose any one of minValue*, but only one)
     *
     * @param \TKusy\Hl7FhirR4\DateTimeType $minValueDateTime
     * @return self
     */
    public function setMinValueDateTime(\TKusy\Hl7FhirR4\DateTimeType $minValueDateTime)
    {
        $this->minValueDateTime = $minValueDateTime;
        return $this;
    }

    /**
     * Gets as minValueInstant
     *
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. (choose any one of minValue*, but only one)
     *
     * @return \TKusy\Hl7FhirR4\InstantType
     */
    public function getMinValueInstant()
    {
        return $this->minValueInstant;
    }

    /**
     * Sets a new minValueInstant
     *
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. (choose any one of minValue*, but only one)
     *
     * @param \TKusy\Hl7FhirR4\InstantType $minValueInstant
     * @return self
     */
    public function setMinValueInstant(\TKusy\Hl7FhirR4\InstantType $minValueInstant)
    {
        $this->minValueInstant = $minValueInstant;
        return $this;
    }

    /**
     * Gets as minValueTime
     *
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. (choose any one of minValue*, but only one)
     *
     * @return \TKusy\Hl7FhirR4\TimeType
     */
    public function getMinValueTime()
    {
        return $this->minValueTime;
    }

    /**
     * Sets a new minValueTime
     *
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. (choose any one of minValue*, but only one)
     *
     * @param \TKusy\Hl7FhirR4\TimeType $minValueTime
     * @return self
     */
    public function setMinValueTime(\TKusy\Hl7FhirR4\TimeType $minValueTime)
    {
        $this->minValueTime = $minValueTime;
        return $this;
    }

    /**
     * Gets as minValueDecimal
     *
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. (choose any one of minValue*, but only one)
     *
     * @return \TKusy\Hl7FhirR4\DecimalType
     */
    public function getMinValueDecimal()
    {
        return $this->minValueDecimal;
    }

    /**
     * Sets a new minValueDecimal
     *
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. (choose any one of minValue*, but only one)
     *
     * @param \TKusy\Hl7FhirR4\DecimalType $minValueDecimal
     * @return self
     */
    public function setMinValueDecimal(\TKusy\Hl7FhirR4\DecimalType $minValueDecimal)
    {
        $this->minValueDecimal = $minValueDecimal;
        return $this;
    }

    /**
     * Gets as minValueInteger
     *
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. (choose any one of minValue*, but only one)
     *
     * @return \TKusy\Hl7FhirR4\IntegerType
     */
    public function getMinValueInteger()
    {
        return $this->minValueInteger;
    }

    /**
     * Sets a new minValueInteger
     *
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. (choose any one of minValue*, but only one)
     *
     * @param \TKusy\Hl7FhirR4\IntegerType $minValueInteger
     * @return self
     */
    public function setMinValueInteger(\TKusy\Hl7FhirR4\IntegerType $minValueInteger)
    {
        $this->minValueInteger = $minValueInteger;
        return $this;
    }

    /**
     * Gets as minValuePositiveInt
     *
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. (choose any one of minValue*, but only one)
     *
     * @return \TKusy\Hl7FhirR4\PositiveIntType
     */
    public function getMinValuePositiveInt()
    {
        return $this->minValuePositiveInt;
    }

    /**
     * Sets a new minValuePositiveInt
     *
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. (choose any one of minValue*, but only one)
     *
     * @param \TKusy\Hl7FhirR4\PositiveIntType $minValuePositiveInt
     * @return self
     */
    public function setMinValuePositiveInt(\TKusy\Hl7FhirR4\PositiveIntType $minValuePositiveInt)
    {
        $this->minValuePositiveInt = $minValuePositiveInt;
        return $this;
    }

    /**
     * Gets as minValueUnsignedInt
     *
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. (choose any one of minValue*, but only one)
     *
     * @return \TKusy\Hl7FhirR4\UnsignedIntType
     */
    public function getMinValueUnsignedInt()
    {
        return $this->minValueUnsignedInt;
    }

    /**
     * Sets a new minValueUnsignedInt
     *
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. (choose any one of minValue*, but only one)
     *
     * @param \TKusy\Hl7FhirR4\UnsignedIntType $minValueUnsignedInt
     * @return self
     */
    public function setMinValueUnsignedInt(\TKusy\Hl7FhirR4\UnsignedIntType $minValueUnsignedInt)
    {
        $this->minValueUnsignedInt = $minValueUnsignedInt;
        return $this;
    }

    /**
     * Gets as minValueQuantity
     *
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. (choose any one of minValue*, but only one)
     *
     * @return \TKusy\Hl7FhirR4\QuantityType
     */
    public function getMinValueQuantity()
    {
        return $this->minValueQuantity;
    }

    /**
     * Sets a new minValueQuantity
     *
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. (choose any one of minValue*, but only one)
     *
     * @param \TKusy\Hl7FhirR4\QuantityType $minValueQuantity
     * @return self
     */
    public function setMinValueQuantity(\TKusy\Hl7FhirR4\QuantityType $minValueQuantity)
    {
        $this->minValueQuantity = $minValueQuantity;
        return $this;
    }

    /**
     * Gets as maxValueDate
     *
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. (choose any one of maxValue*, but only one)
     *
     * @return \TKusy\Hl7FhirR4\DateType
     */
    public function getMaxValueDate()
    {
        return $this->maxValueDate;
    }

    /**
     * Sets a new maxValueDate
     *
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. (choose any one of maxValue*, but only one)
     *
     * @param \TKusy\Hl7FhirR4\DateType $maxValueDate
     * @return self
     */
    public function setMaxValueDate(\TKusy\Hl7FhirR4\DateType $maxValueDate)
    {
        $this->maxValueDate = $maxValueDate;
        return $this;
    }

    /**
     * Gets as maxValueDateTime
     *
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. (choose any one of maxValue*, but only one)
     *
     * @return \TKusy\Hl7FhirR4\DateTimeType
     */
    public function getMaxValueDateTime()
    {
        return $this->maxValueDateTime;
    }

    /**
     * Sets a new maxValueDateTime
     *
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. (choose any one of maxValue*, but only one)
     *
     * @param \TKusy\Hl7FhirR4\DateTimeType $maxValueDateTime
     * @return self
     */
    public function setMaxValueDateTime(\TKusy\Hl7FhirR4\DateTimeType $maxValueDateTime)
    {
        $this->maxValueDateTime = $maxValueDateTime;
        return $this;
    }

    /**
     * Gets as maxValueInstant
     *
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. (choose any one of maxValue*, but only one)
     *
     * @return \TKusy\Hl7FhirR4\InstantType
     */
    public function getMaxValueInstant()
    {
        return $this->maxValueInstant;
    }

    /**
     * Sets a new maxValueInstant
     *
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. (choose any one of maxValue*, but only one)
     *
     * @param \TKusy\Hl7FhirR4\InstantType $maxValueInstant
     * @return self
     */
    public function setMaxValueInstant(\TKusy\Hl7FhirR4\InstantType $maxValueInstant)
    {
        $this->maxValueInstant = $maxValueInstant;
        return $this;
    }

    /**
     * Gets as maxValueTime
     *
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. (choose any one of maxValue*, but only one)
     *
     * @return \TKusy\Hl7FhirR4\TimeType
     */
    public function getMaxValueTime()
    {
        return $this->maxValueTime;
    }

    /**
     * Sets a new maxValueTime
     *
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. (choose any one of maxValue*, but only one)
     *
     * @param \TKusy\Hl7FhirR4\TimeType $maxValueTime
     * @return self
     */
    public function setMaxValueTime(\TKusy\Hl7FhirR4\TimeType $maxValueTime)
    {
        $this->maxValueTime = $maxValueTime;
        return $this;
    }

    /**
     * Gets as maxValueDecimal
     *
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. (choose any one of maxValue*, but only one)
     *
     * @return \TKusy\Hl7FhirR4\DecimalType
     */
    public function getMaxValueDecimal()
    {
        return $this->maxValueDecimal;
    }

    /**
     * Sets a new maxValueDecimal
     *
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. (choose any one of maxValue*, but only one)
     *
     * @param \TKusy\Hl7FhirR4\DecimalType $maxValueDecimal
     * @return self
     */
    public function setMaxValueDecimal(\TKusy\Hl7FhirR4\DecimalType $maxValueDecimal)
    {
        $this->maxValueDecimal = $maxValueDecimal;
        return $this;
    }

    /**
     * Gets as maxValueInteger
     *
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. (choose any one of maxValue*, but only one)
     *
     * @return \TKusy\Hl7FhirR4\IntegerType
     */
    public function getMaxValueInteger()
    {
        return $this->maxValueInteger;
    }

    /**
     * Sets a new maxValueInteger
     *
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. (choose any one of maxValue*, but only one)
     *
     * @param \TKusy\Hl7FhirR4\IntegerType $maxValueInteger
     * @return self
     */
    public function setMaxValueInteger(\TKusy\Hl7FhirR4\IntegerType $maxValueInteger)
    {
        $this->maxValueInteger = $maxValueInteger;
        return $this;
    }

    /**
     * Gets as maxValuePositiveInt
     *
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. (choose any one of maxValue*, but only one)
     *
     * @return \TKusy\Hl7FhirR4\PositiveIntType
     */
    public function getMaxValuePositiveInt()
    {
        return $this->maxValuePositiveInt;
    }

    /**
     * Sets a new maxValuePositiveInt
     *
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. (choose any one of maxValue*, but only one)
     *
     * @param \TKusy\Hl7FhirR4\PositiveIntType $maxValuePositiveInt
     * @return self
     */
    public function setMaxValuePositiveInt(\TKusy\Hl7FhirR4\PositiveIntType $maxValuePositiveInt)
    {
        $this->maxValuePositiveInt = $maxValuePositiveInt;
        return $this;
    }

    /**
     * Gets as maxValueUnsignedInt
     *
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. (choose any one of maxValue*, but only one)
     *
     * @return \TKusy\Hl7FhirR4\UnsignedIntType
     */
    public function getMaxValueUnsignedInt()
    {
        return $this->maxValueUnsignedInt;
    }

    /**
     * Sets a new maxValueUnsignedInt
     *
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. (choose any one of maxValue*, but only one)
     *
     * @param \TKusy\Hl7FhirR4\UnsignedIntType $maxValueUnsignedInt
     * @return self
     */
    public function setMaxValueUnsignedInt(\TKusy\Hl7FhirR4\UnsignedIntType $maxValueUnsignedInt)
    {
        $this->maxValueUnsignedInt = $maxValueUnsignedInt;
        return $this;
    }

    /**
     * Gets as maxValueQuantity
     *
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. (choose any one of maxValue*, but only one)
     *
     * @return \TKusy\Hl7FhirR4\QuantityType
     */
    public function getMaxValueQuantity()
    {
        return $this->maxValueQuantity;
    }

    /**
     * Sets a new maxValueQuantity
     *
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. (choose any one of maxValue*, but only one)
     *
     * @param \TKusy\Hl7FhirR4\QuantityType $maxValueQuantity
     * @return self
     */
    public function setMaxValueQuantity(\TKusy\Hl7FhirR4\QuantityType $maxValueQuantity)
    {
        $this->maxValueQuantity = $maxValueQuantity;
        return $this;
    }

    /**
     * Gets as maxLength
     *
     * Indicates the maximum length in characters that is permitted to be present in conformant instances and which is expected to be supported by conformant consumers that support the element.
     *
     * @return \TKusy\Hl7FhirR4\IntegerType
     */
    public function getMaxLength()
    {
        return $this->maxLength;
    }

    /**
     * Sets a new maxLength
     *
     * Indicates the maximum length in characters that is permitted to be present in conformant instances and which is expected to be supported by conformant consumers that support the element.
     *
     * @param \TKusy\Hl7FhirR4\IntegerType $maxLength
     * @return self
     */
    public function setMaxLength(\TKusy\Hl7FhirR4\IntegerType $maxLength)
    {
        $this->maxLength = $maxLength;
        return $this;
    }

    /**
     * Adds as condition
     *
     * A reference to an invariant that may make additional statements about the cardinality or value in the instance.
     *
     * @return self
     * @param \TKusy\Hl7FhirR4\IdType $condition
     */
    public function addToCondition(\TKusy\Hl7FhirR4\IdType $condition)
    {
        $this->condition[] = $condition;
        return $this;
    }

    /**
     * isset condition
     *
     * A reference to an invariant that may make additional statements about the cardinality or value in the instance.
     *
     * @param int|string $index
     * @return bool
     */
    public function issetCondition($index)
    {
        return isset($this->condition[$index]);
    }

    /**
     * unset condition
     *
     * A reference to an invariant that may make additional statements about the cardinality or value in the instance.
     *
     * @param int|string $index
     * @return void
     */
    public function unsetCondition($index)
    {
        unset($this->condition[$index]);
    }

    /**
     * Gets as condition
     *
     * A reference to an invariant that may make additional statements about the cardinality or value in the instance.
     *
     * @return \TKusy\Hl7FhirR4\IdType[]
     */
    public function getCondition()
    {
        return $this->condition;
    }

    /**
     * Sets a new condition
     *
     * A reference to an invariant that may make additional statements about the cardinality or value in the instance.
     *
     * @param \TKusy\Hl7FhirR4\IdType[] $condition
     * @return self
     */
    public function setCondition(array $condition)
    {
        $this->condition = $condition;
        return $this;
    }

    /**
     * Adds as constraint
     *
     * Formal constraints such as co-occurrence and other constraints that can be computationally evaluated within the context of the instance.
     *
     * @return self
     * @param \TKusy\Hl7FhirR4\ElementDefinitionConstraintType $constraint
     */
    public function addToConstraint(\TKusy\Hl7FhirR4\ElementDefinitionConstraintType $constraint)
    {
        $this->constraint[] = $constraint;
        return $this;
    }

    /**
     * isset constraint
     *
     * Formal constraints such as co-occurrence and other constraints that can be computationally evaluated within the context of the instance.
     *
     * @param int|string $index
     * @return bool
     */
    public function issetConstraint($index)
    {
        return isset($this->constraint[$index]);
    }

    /**
     * unset constraint
     *
     * Formal constraints such as co-occurrence and other constraints that can be computationally evaluated within the context of the instance.
     *
     * @param int|string $index
     * @return void
     */
    public function unsetConstraint($index)
    {
        unset($this->constraint[$index]);
    }

    /**
     * Gets as constraint
     *
     * Formal constraints such as co-occurrence and other constraints that can be computationally evaluated within the context of the instance.
     *
     * @return \TKusy\Hl7FhirR4\ElementDefinitionConstraintType[]
     */
    public function getConstraint()
    {
        return $this->constraint;
    }

    /**
     * Sets a new constraint
     *
     * Formal constraints such as co-occurrence and other constraints that can be computationally evaluated within the context of the instance.
     *
     * @param \TKusy\Hl7FhirR4\ElementDefinitionConstraintType[] $constraint
     * @return self
     */
    public function setConstraint(array $constraint)
    {
        $this->constraint = $constraint;
        return $this;
    }

    /**
     * Gets as mustSupport
     *
     * If true, implementations that produce or consume resources SHALL provide "support" for the element in some meaningful way. If false, the element may be ignored and not supported. If false, whether to populate or use the data element in any way is at the discretion of the implementation.
     *
     * @return \TKusy\Hl7FhirR4\BooleanType
     */
    public function getMustSupport()
    {
        return $this->mustSupport;
    }

    /**
     * Sets a new mustSupport
     *
     * If true, implementations that produce or consume resources SHALL provide "support" for the element in some meaningful way. If false, the element may be ignored and not supported. If false, whether to populate or use the data element in any way is at the discretion of the implementation.
     *
     * @param \TKusy\Hl7FhirR4\BooleanType $mustSupport
     * @return self
     */
    public function setMustSupport(\TKusy\Hl7FhirR4\BooleanType $mustSupport)
    {
        $this->mustSupport = $mustSupport;
        return $this;
    }

    /**
     * Gets as isModifier
     *
     * If true, the value of this element affects the interpretation of the element or resource that contains it, and the value of the element cannot be ignored. Typically, this is used for status, negation and qualification codes. The effect of this is that the element cannot be ignored by systems: they SHALL either recognize the element and process it, and/or a pre-determination has been made that it is not relevant to their particular system.
     *
     * @return \TKusy\Hl7FhirR4\BooleanType
     */
    public function getIsModifier()
    {
        return $this->isModifier;
    }

    /**
     * Sets a new isModifier
     *
     * If true, the value of this element affects the interpretation of the element or resource that contains it, and the value of the element cannot be ignored. Typically, this is used for status, negation and qualification codes. The effect of this is that the element cannot be ignored by systems: they SHALL either recognize the element and process it, and/or a pre-determination has been made that it is not relevant to their particular system.
     *
     * @param \TKusy\Hl7FhirR4\BooleanType $isModifier
     * @return self
     */
    public function setIsModifier(\TKusy\Hl7FhirR4\BooleanType $isModifier)
    {
        $this->isModifier = $isModifier;
        return $this;
    }

    /**
     * Gets as isModifierReason
     *
     * Explains how that element affects the interpretation of the resource or element that contains it.
     *
     * @return \TKusy\Hl7FhirR4\StringType
     */
    public function getIsModifierReason()
    {
        return $this->isModifierReason;
    }

    /**
     * Sets a new isModifierReason
     *
     * Explains how that element affects the interpretation of the resource or element that contains it.
     *
     * @param \TKusy\Hl7FhirR4\StringType $isModifierReason
     * @return self
     */
    public function setIsModifierReason(\TKusy\Hl7FhirR4\StringType $isModifierReason)
    {
        $this->isModifierReason = $isModifierReason;
        return $this;
    }

    /**
     * Gets as isSummary
     *
     * Whether the element should be included if a client requests a search with the parameter _summary=true.
     *
     * @return \TKusy\Hl7FhirR4\BooleanType
     */
    public function getIsSummary()
    {
        return $this->isSummary;
    }

    /**
     * Sets a new isSummary
     *
     * Whether the element should be included if a client requests a search with the parameter _summary=true.
     *
     * @param \TKusy\Hl7FhirR4\BooleanType $isSummary
     * @return self
     */
    public function setIsSummary(\TKusy\Hl7FhirR4\BooleanType $isSummary)
    {
        $this->isSummary = $isSummary;
        return $this;
    }

    /**
     * Gets as binding
     *
     * Binds to a value set if this element is coded (code, Coding, CodeableConcept, Quantity), or the data types (string, uri).
     *
     * @return \TKusy\Hl7FhirR4\ElementDefinitionBindingType
     */
    public function getBinding()
    {
        return $this->binding;
    }

    /**
     * Sets a new binding
     *
     * Binds to a value set if this element is coded (code, Coding, CodeableConcept, Quantity), or the data types (string, uri).
     *
     * @param \TKusy\Hl7FhirR4\ElementDefinitionBindingType $binding
     * @return self
     */
    public function setBinding(\TKusy\Hl7FhirR4\ElementDefinitionBindingType $binding)
    {
        $this->binding = $binding;
        return $this;
    }

    /**
     * Adds as mapping
     *
     * Identifies a concept from an external specification that roughly corresponds to this element.
     *
     * @return self
     * @param \TKusy\Hl7FhirR4\ElementDefinitionMappingType $mapping
     */
    public function addToMapping(\TKusy\Hl7FhirR4\ElementDefinitionMappingType $mapping)
    {
        $this->mapping[] = $mapping;
        return $this;
    }

    /**
     * isset mapping
     *
     * Identifies a concept from an external specification that roughly corresponds to this element.
     *
     * @param int|string $index
     * @return bool
     */
    public function issetMapping($index)
    {
        return isset($this->mapping[$index]);
    }

    /**
     * unset mapping
     *
     * Identifies a concept from an external specification that roughly corresponds to this element.
     *
     * @param int|string $index
     * @return void
     */
    public function unsetMapping($index)
    {
        unset($this->mapping[$index]);
    }

    /**
     * Gets as mapping
     *
     * Identifies a concept from an external specification that roughly corresponds to this element.
     *
     * @return \TKusy\Hl7FhirR4\ElementDefinitionMappingType[]
     */
    public function getMapping()
    {
        return $this->mapping;
    }

    /**
     * Sets a new mapping
     *
     * Identifies a concept from an external specification that roughly corresponds to this element.
     *
     * @param \TKusy\Hl7FhirR4\ElementDefinitionMappingType[] $mapping
     * @return self
     */
    public function setMapping(array $mapping)
    {
        $this->mapping = $mapping;
        return $this;
    }


}

